

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Feb 03 00:25:24 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 22/03/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0006                     	;# 
    58     0007                     	;# 
    59     0008                     	;# 
    60     0009                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000D                     	;# 
    65     000E                     	;# 
    66     000E                     	;# 
    67     000F                     	;# 
    68     0010                     	;# 
    69     0011                     	;# 
    70     0012                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0015                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001B                     	;# 
    81     001B                     	;# 
    82     001C                     	;# 
    83     001D                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     0081                     	;# 
    87     0085                     	;# 
    88     0086                     	;# 
    89     0087                     	;# 
    90     0088                     	;# 
    91     0089                     	;# 
    92     008C                     	;# 
    93     008D                     	;# 
    94     008E                     	;# 
    95     0091                     	;# 
    96     0092                     	;# 
    97     0093                     	;# 
    98     0094                     	;# 
    99     0098                     	;# 
   100     0099                     	;# 
   101     009C                     	;# 
   102     009D                     	;# 
   103     009E                     	;# 
   104     009F                     	;# 
   105     010C                     	;# 
   106     010D                     	;# 
   107     010E                     	;# 
   108     010F                     	;# 
   109     018C                     	;# 
   110     018D                     	;# 
   111     0000                     	;# 
   112     0001                     	;# 
   113     0002                     	;# 
   114     0003                     	;# 
   115     0004                     	;# 
   116     0005                     	;# 
   117     0006                     	;# 
   118     0007                     	;# 
   119     0008                     	;# 
   120     0009                     	;# 
   121     000A                     	;# 
   122     000B                     	;# 
   123     000C                     	;# 
   124     000D                     	;# 
   125     000E                     	;# 
   126     000E                     	;# 
   127     000F                     	;# 
   128     0010                     	;# 
   129     0011                     	;# 
   130     0012                     	;# 
   131     0013                     	;# 
   132     0014                     	;# 
   133     0015                     	;# 
   134     0015                     	;# 
   135     0016                     	;# 
   136     0017                     	;# 
   137     0018                     	;# 
   138     0019                     	;# 
   139     001A                     	;# 
   140     001B                     	;# 
   141     001B                     	;# 
   142     001C                     	;# 
   143     001D                     	;# 
   144     001E                     	;# 
   145     001F                     	;# 
   146     0081                     	;# 
   147     0085                     	;# 
   148     0086                     	;# 
   149     0087                     	;# 
   150     0088                     	;# 
   151     0089                     	;# 
   152     008C                     	;# 
   153     008D                     	;# 
   154     008E                     	;# 
   155     0091                     	;# 
   156     0092                     	;# 
   157     0093                     	;# 
   158     0094                     	;# 
   159     0098                     	;# 
   160     0099                     	;# 
   161     009C                     	;# 
   162     009D                     	;# 
   163     009E                     	;# 
   164     009F                     	;# 
   165     010C                     	;# 
   166     010D                     	;# 
   167     010E                     	;# 
   168     010F                     	;# 
   169     018C                     	;# 
   170     018D                     	;# 
   171                           
   172                           	psect	idataBANK0
   173     067D                     __pidataBANK0:
   174                           
   175                           ;initializer for _tra
   176     067D  3454               	retlw	84
   177     067E  3472               	retlw	114
   178     067F  3461               	retlw	97
   179     0680  346E               	retlw	110
   180     0681  3473               	retlw	115
   181     0682  346D               	retlw	109
   182     0683  3469               	retlw	105
   183     0684  3474               	retlw	116
   184     0685  3420               	retlw	32
   185     0686  3444               	retlw	68
   186     0687  3461               	retlw	97
   187     0688  3474               	retlw	116
   188     0689  3461               	retlw	97
   189     068A  343A               	retlw	58
   190                           
   191                           ;initializer for _rec
   192     068B  3452               	retlw	82
   193     068C  3465               	retlw	101
   194     068D  3463               	retlw	99
   195     068E  3465               	retlw	101
   196     068F  3469               	retlw	105
   197     0690  3476               	retlw	118
   198     0691  3465               	retlw	101
   199     0692  3464               	retlw	100
   200     0693  3420               	retlw	32
   201     0694  3444               	retlw	68
   202     0695  3461               	retlw	97
   203     0696  3474               	retlw	116
   204     0697  3461               	retlw	97
   205     0698  343A               	retlw	58
   206     0008                     _PORTD	set	8
   207     0018                     _RCSTA	set	24
   208     0019                     _TXREG	set	25
   209     001A                     _RCREG	set	26
   210     0032                     _RB2	set	50
   211     0033                     _RB3	set	51
   212     0065                     _RCIF	set	101
   213     0088                     _TRISD	set	136
   214     0086                     _TRISB	set	134
   215     0098                     _TXSTA	set	152
   216     0099                     _SPBRG	set	153
   217     0087                     _TRISC	set	135
   218                           
   219                           	psect	cinit
   220     07E9                     start_initialization:	
   221                           ; #config settings
   222                           
   223     07E9                     __initialization:
   224                           
   225                           ; Initialize objects allocated to BANK0
   226     07E9  1383               	bcf	3,7	;select IRP bank0
   227     07EA  303C               	movlw	low (__pdataBANK0+28)
   228     07EB  00FD               	movwf	btemp+-1
   229     07EC  3006               	movlw	high __pidataBANK0
   230     07ED  00FE               	movwf	btemp
   231     07EE  307D               	movlw	low __pidataBANK0
   232     07EF  00FF               	movwf	btemp+1
   233     07F0  3020               	movlw	low __pdataBANK0
   234     07F1  0084               	movwf	4
   235     07F2  120A  118A  266E  120A  118A  	fcall	init_ram0
   236                           
   237                           ; Clear objects allocated to COMMON
   238     07F7  01F7               	clrf	__pbssCOMMON& (0+127)
   239     07F8  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   240     07F9  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   241     07FA  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   242     07FB  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
   243     07FC                     end_of_initialization:	
   244                           ;End of C runtime variable initialization code
   245                           
   246     07FC                     __end_of__initialization:
   247     07FC  0183               	clrf	3
   248     07FD  120A  118A  2F3D   	ljmp	_main	;jump to C main() function
   249                           
   250                           	psect	bssCOMMON
   251     0077                     __pbssCOMMON:
   252     0077                     _j:
   253     0077                     	ds	2
   254     0079                     _i:
   255     0079                     	ds	2
   256     007B                     _rec_val:
   257     007B                     	ds	1
   258                           
   259                           	psect	dataBANK0
   260     0020                     __pdataBANK0:
   261     0020                     _tra:
   262     0020                     	ds	14
   263     002E                     _rec:
   264     002E                     	ds	14
   265                           
   266                           	psect	inittext
   267     066A                     init_fetch0:	
   268                           ;	Called with low address in FSR and high address in W
   269                           
   270     066A  087E               	movf	btemp,w
   271     066B  008A               	movwf	10
   272     066C  087F               	movf	btemp+1,w
   273     066D  0082               	movwf	2
   274     066E                     init_ram0:	
   275                           ;Called with:
   276                           ;	high address of idata address in btemp 
   277                           ;	low address of idata address in btemp+1 
   278                           ;	low address of data in FSR
   279                           ;	high address + 1 of data in btemp-1
   280                           
   281     066E  120A  118A  266A  120A  118A  	fcall	init_fetch0
   282     0673  0080               	movwf	0
   283     0674  0A84               	incf	4,f
   284     0675  0804               	movf	4,w
   285     0676  067D               	xorwf	btemp+-1,w
   286     0677  1903               	btfsc	3,2
   287     0678  3400               	retlw	0
   288     0679  0AFF               	incf	btemp+1,f
   289     067A  1903               	btfsc	3,2
   290     067B  0AFE               	incf	btemp,f
   291     067C  2E6E               	goto	init_ram0
   292                           
   293                           	psect	cstackCOMMON
   294     0070                     __pcstackCOMMON:
   295     0070                     ?_init:
   296     0070                     ?_Lcd_Command:	
   297                           ; 1 bytes @ 0x0
   298                           
   299     0070                     ??_Lcd_Command:	
   300                           ; 1 bytes @ 0x0
   301                           
   302     0070                     ?_Lcd_Data:	
   303                           ; 1 bytes @ 0x0
   304                           
   305     0070                     ??_Lcd_Data:	
   306                           ; 1 bytes @ 0x0
   307                           
   308     0070                     ?_main:	
   309                           ; 1 bytes @ 0x0
   310                           
   311                           
   312                           ; 1 bytes @ 0x0
   313     0070                     	ds	2
   314     0072                     Lcd_Command@i:
   315     0072                     Lcd_Data@i:	
   316                           ; 1 bytes @ 0x2
   317                           
   318                           
   319                           ; 1 bytes @ 0x2
   320     0072                     	ds	1
   321     0073                     ??_init:
   322                           
   323                           ; 1 bytes @ 0x3
   324     0073                     	ds	2
   325     0075                     ??_main:
   326                           
   327                           ; 1 bytes @ 0x5
   328     0075                     	ds	2
   329                           
   330                           	psect	maintext
   331     073D                     __pmaintext:	
   332 ;;
   333 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   334 ;;
   335 ;; *************** function _main *****************
   336 ;; Defined at:
   337 ;;		line 27 in file "8T_UART_LCD_Receive.c"
   338 ;; Parameters:    Size  Location     Type
   339 ;;		None
   340 ;; Auto vars:     Size  Location     Type
   341 ;;		None
   342 ;; Return value:  Size  Location     Type
   343 ;;                  1    wreg      void 
   344 ;; Registers used:
   345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   346 ;; Tracked objects:
   347 ;;		On entry : B00/0
   348 ;;		On exit  : 0/0
   349 ;;		Unchanged: 0/0
   350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   351 ;;      Params:         0       0       0       0       0
   352 ;;      Locals:         0       0       0       0       0
   353 ;;      Temps:          2       0       0       0       0
   354 ;;      Totals:         2       0       0       0       0
   355 ;;Total ram usage:        2 bytes
   356 ;; Hardware stack levels required when called: 2
   357 ;; This function calls:
   358 ;;		_Lcd_Command
   359 ;;		_Lcd_Data
   360 ;;		_init
   361 ;; This function is called by:
   362 ;;		Startup code after reset
   363 ;; This function uses a non-reentrant model
   364 ;;
   365                           
   366     073D                     _main:	
   367                           ;psect for function _main
   368                           
   369     073D                     l828:	
   370                           ;incstack = 0
   371                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   372                           
   373     073D  120A  118A  2699  120A  118A  	fcall	_init
   374     0742                     l830:
   375     0742  1283               	bcf	3,5	;RP0=0, select bank0
   376     0743  1303               	bcf	3,6	;RP1=0, select bank0
   377     0744  1E8C               	btfss	12,5	;volatile
   378     0745  2F47               	goto	u61
   379     0746  2F48               	goto	u60
   380     0747                     u61:
   381     0747  2FDD               	goto	l860
   382     0748                     u60:
   383     0748                     l832:
   384     0748  081A               	movf	26,w	;volatile
   385     0749  00FB               	movwf	_rec_val
   386     074A  2FC7               	goto	l858
   387     074B                     l834:
   388     074B  308E               	movlw	142
   389     074C  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   390     0751  3041               	movlw	65
   391     0752  120A  118A  2659  120A  118A  	fcall	_Lcd_Data
   392     0757  30CE               	movlw	206
   393     0758  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   394     075D  3061               	movlw	97
   395     075E  120A  118A  2659  120A  118A  	fcall	_Lcd_Data
   396     0763                     l836:
   397     0763  3061               	movlw	97
   398     0764  1283               	bcf	3,5	;RP0=0, select bank0
   399     0765  1303               	bcf	3,6	;RP1=0, select bank0
   400     0766  0099               	movwf	25	;volatile
   401     0767                     l838:
   402     0767  30C3               	movlw	195
   403     0768  00F6               	movwf	??_main+1
   404     0769  30CD               	movlw	205
   405     076A  00F5               	movwf	??_main
   406     076B                     u77:
   407     076B  0BF5               	decfsz	??_main,f
   408     076C  2F6B               	goto	u77
   409     076D  0BF6               	decfsz	??_main+1,f
   410     076E  2F6B               	goto	u77
   411     076F  2FDD               	goto	l860
   412     0770                     l840:
   413     0770  308E               	movlw	142
   414     0771  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   415     0776  3042               	movlw	66
   416     0777  120A  118A  2659  120A  118A  	fcall	_Lcd_Data
   417     077C  30CE               	movlw	206
   418     077D  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   419     0782  3062               	movlw	98
   420     0783  120A  118A  2659  120A  118A  	fcall	_Lcd_Data
   421     0788                     l842:
   422     0788  3062               	movlw	98
   423     0789  1283               	bcf	3,5	;RP0=0, select bank0
   424     078A  1303               	bcf	3,6	;RP1=0, select bank0
   425     078B  0099               	movwf	25	;volatile
   426     078C  2FDD               	goto	l860
   427     078D                     l844:
   428     078D  308E               	movlw	142
   429     078E  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   430     0793  3043               	movlw	67
   431     0794  120A  118A  2659  120A  118A  	fcall	_Lcd_Data
   432     0799  30CE               	movlw	206
   433     079A  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   434     079F  3063               	movlw	99
   435     07A0  120A  118A  2659  120A  118A  	fcall	_Lcd_Data
   436     07A5                     l846:
   437     07A5  3063               	movlw	99
   438     07A6  1283               	bcf	3,5	;RP0=0, select bank0
   439     07A7  1303               	bcf	3,6	;RP1=0, select bank0
   440     07A8  0099               	movwf	25	;volatile
   441     07A9  2F67               	goto	l838
   442     07AA                     l850:
   443     07AA  308E               	movlw	142
   444     07AB  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   445     07B0  3044               	movlw	68
   446     07B1  120A  118A  2659  120A  118A  	fcall	_Lcd_Data
   447     07B6  30CE               	movlw	206
   448     07B7  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   449     07BC  3064               	movlw	100
   450     07BD  120A  118A  2659  120A  118A  	fcall	_Lcd_Data
   451     07C2                     l852:
   452     07C2  3064               	movlw	100
   453     07C3  1283               	bcf	3,5	;RP0=0, select bank0
   454     07C4  1303               	bcf	3,6	;RP1=0, select bank0
   455     07C5  0099               	movwf	25	;volatile
   456     07C6  2F67               	goto	l838
   457     07C7                     l858:
   458     07C7  087B               	movf	_rec_val,w
   459     07C8  00F5               	movwf	??_main
   460     07C9  01F6               	clrf	??_main+1
   461                           
   462                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   463                           ; Switch size 1, requested type "simple"
   464                           ; Number of cases is 1, Range of values is 0 to 0
   465                           ; switch strategies available:
   466                           ; Name         Instructions Cycles
   467                           ; simple_byte            4     3 (average)
   468                           ; direct_byte           11     8 (fixed)
   469                           ; jumptable            260     6 (fixed)
   470                           ;	Chosen strategy is simple_byte
   471     07CA  0876               	movf	??_main+1,w
   472     07CB  3A00               	xorlw	0	; case 0
   473     07CC  1903               	skipnz
   474     07CD  2FCF               	goto	l886
   475     07CE  2FDD               	goto	l860
   476     07CF                     l886:
   477                           
   478                           ; Switch size 1, requested type "simple"
   479                           ; Number of cases is 4, Range of values is 65 to 68
   480                           ; switch strategies available:
   481                           ; Name         Instructions Cycles
   482                           ; simple_byte           13     7 (average)
   483                           ; direct_byte           23    11 (fixed)
   484                           ; jumptable            263     9 (fixed)
   485                           ;	Chosen strategy is simple_byte
   486     07CF  0875               	movf	??_main,w
   487     07D0  3A41               	xorlw	65	; case 65
   488     07D1  1903               	skipnz
   489     07D2  2F4B               	goto	l834
   490     07D3  3A03               	xorlw	3	; case 66
   491     07D4  1903               	skipnz
   492     07D5  2F70               	goto	l840
   493     07D6  3A01               	xorlw	1	; case 67
   494     07D7  1903               	skipnz
   495     07D8  2F8D               	goto	l844
   496     07D9  3A07               	xorlw	7	; case 68
   497     07DA  1903               	skipnz
   498     07DB  2FAA               	goto	l850
   499     07DC  2FDD               	goto	l860
   500     07DD                     l860:
   501     07DD  30C3               	movlw	195
   502     07DE  00F6               	movwf	??_main+1
   503     07DF  30CD               	movlw	205
   504     07E0  00F5               	movwf	??_main
   505     07E1                     u87:
   506     07E1  0BF5               	decfsz	??_main,f
   507     07E2  2FE1               	goto	u87
   508     07E3  0BF6               	decfsz	??_main+1,f
   509     07E4  2FE1               	goto	u87
   510     07E5  2F42               	goto	l830
   511     07E6  120A  118A  2800   	ljmp	start
   512     07E9                     __end_of_main:
   513                           
   514                           	psect	text1
   515     0699                     __ptext1:	
   516 ;; *************** function _init *****************
   517 ;; Defined at:
   518 ;;		line 77 in file "8T_UART_LCD_Receive.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;		None
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      void 
   525 ;; Registers used:
   526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   532 ;;      Params:         0       0       0       0       0
   533 ;;      Locals:         0       0       0       0       0
   534 ;;      Temps:          2       0       0       0       0
   535 ;;      Totals:         2       0       0       0       0
   536 ;;Total ram usage:        2 bytes
   537 ;; Hardware stack levels used: 1
   538 ;; Hardware stack levels required when called: 1
   539 ;; This function calls:
   540 ;;		_Lcd_Command
   541 ;;		_Lcd_Data
   542 ;; This function is called by:
   543 ;;		_main
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547     0699                     _init:	
   548                           ;psect for function _init
   549                           
   550     0699                     l766:	
   551                           ;incstack = 0
   552                           ; Regs used in _init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   553                           
   554     0699  30C0               	movlw	192
   555     069A  1683               	bsf	3,5	;RP0=1, select bank1
   556     069B  1303               	bcf	3,6	;RP1=0, select bank1
   557     069C  0087               	movwf	7	;volatile
   558     069D  3009               	movlw	9
   559     069E  0099               	movwf	25	;volatile
   560     069F                     l768:
   561     069F  30EF               	movlw	239
   562     06A0  00FF               	movwf	btemp+1
   563     06A1  087F               	movf	btemp+1,w
   564     06A2  0598               	andwf	24,f	;volatile
   565     06A3                     l770:
   566     06A3  1283               	bcf	3,5	;RP0=0, select bank0
   567     06A4  1303               	bcf	3,6	;RP1=0, select bank0
   568     06A5  1798               	bsf	24,7	;volatile
   569     06A6                     l772:
   570     06A6  1618               	bsf	24,4	;volatile
   571     06A7                     l774:
   572     06A7  1683               	bsf	3,5	;RP0=1, select bank1
   573     06A8  1303               	bcf	3,6	;RP1=0, select bank1
   574     06A9  1698               	bsf	24,5	;volatile
   575     06AA                     l776:
   576     06AA  0186               	clrf	6	;volatile
   577     06AB                     l778:
   578     06AB  0188               	clrf	8	;volatile
   579     06AC                     l780:
   580     06AC  3030               	movlw	48
   581     06AD  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   582     06B2                     l782:
   583     06B2  30C3               	movlw	195
   584     06B3  00F4               	movwf	??_init+1
   585     06B4  30CD               	movlw	205
   586     06B5  00F3               	movwf	??_init
   587     06B6                     u97:
   588     06B6  0BF3               	decfsz	??_init,f
   589     06B7  2EB6               	goto	u97
   590     06B8  0BF4               	decfsz	??_init+1,f
   591     06B9  2EB6               	goto	u97
   592     06BA                     l784:
   593     06BA  3030               	movlw	48
   594     06BB  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   595     06C0                     l786:
   596     06C0  30C3               	movlw	195
   597     06C1  00F4               	movwf	??_init+1
   598     06C2  30CD               	movlw	205
   599     06C3  00F3               	movwf	??_init
   600     06C4                     u107:
   601     06C4  0BF3               	decfsz	??_init,f
   602     06C5  2EC4               	goto	u107
   603     06C6  0BF4               	decfsz	??_init+1,f
   604     06C7  2EC4               	goto	u107
   605     06C8                     l788:
   606     06C8  3030               	movlw	48
   607     06C9  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   608     06CE                     l790:
   609     06CE  30C3               	movlw	195
   610     06CF  00F4               	movwf	??_init+1
   611     06D0  30CD               	movlw	205
   612     06D1  00F3               	movwf	??_init
   613     06D2                     u117:
   614     06D2  0BF3               	decfsz	??_init,f
   615     06D3  2ED2               	goto	u117
   616     06D4  0BF4               	decfsz	??_init+1,f
   617     06D5  2ED2               	goto	u117
   618     06D6                     l792:
   619     06D6  3038               	movlw	56
   620     06D7  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   621     06DC                     l794:
   622     06DC  30C3               	movlw	195
   623     06DD  00F4               	movwf	??_init+1
   624     06DE  30CD               	movlw	205
   625     06DF  00F3               	movwf	??_init
   626     06E0                     u127:
   627     06E0  0BF3               	decfsz	??_init,f
   628     06E1  2EE0               	goto	u127
   629     06E2  0BF4               	decfsz	??_init+1,f
   630     06E3  2EE0               	goto	u127
   631     06E4                     l796:
   632     06E4  300C               	movlw	12
   633     06E5  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   634     06EA                     l798:
   635     06EA  30C3               	movlw	195
   636     06EB  00F4               	movwf	??_init+1
   637     06EC  30CD               	movlw	205
   638     06ED  00F3               	movwf	??_init
   639     06EE                     u137:
   640     06EE  0BF3               	decfsz	??_init,f
   641     06EF  2EEE               	goto	u137
   642     06F0  0BF4               	decfsz	??_init+1,f
   643     06F1  2EEE               	goto	u137
   644     06F2                     l800:
   645     06F2  3080               	movlw	128
   646     06F3  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   647     06F8                     l802:
   648     06F8  01F9               	clrf	_i
   649     06F9  01FA               	clrf	_i+1
   650     06FA                     l808:
   651     06FA  0879               	movf	_i,w
   652     06FB  3E2E               	addlw	(low (_rec| 0))& (0+255)
   653     06FC  0084               	movwf	4
   654     06FD  1383               	bcf	3,7	;select IRP bank0
   655     06FE  0800               	movf	0,w
   656     06FF  120A  118A  2659  120A  118A  	fcall	_Lcd_Data
   657     0704                     l810:
   658     0704  3001               	movlw	1
   659     0705  07F9               	addwf	_i,f
   660     0706  1803               	skipnc
   661     0707  0AFA               	incf	_i+1,f
   662     0708  3000               	movlw	0
   663     0709  07FA               	addwf	_i+1,f
   664     070A                     l812:
   665     070A  087A               	movf	_i+1,w
   666     070B  3A80               	xorlw	128
   667     070C  00FF               	movwf	btemp+1
   668     070D  3080               	movlw	128
   669     070E  027F               	subwf	btemp+1,w
   670     070F  1D03               	skipz
   671     0710  2F13               	goto	u45
   672     0711  300E               	movlw	14
   673     0712  0279               	subwf	_i,w
   674     0713                     u45:
   675     0713  1C03               	skipc
   676     0714  2F16               	goto	u41
   677     0715  2F17               	goto	u40
   678     0716                     u41:
   679     0716  2EFA               	goto	l808
   680     0717                     u40:
   681     0717                     l814:
   682     0717  30C0               	movlw	192
   683     0718  120A  118A  2648  120A  118A  	fcall	_Lcd_Command
   684     071D                     l816:
   685     071D  01F7               	clrf	_j
   686     071E  01F8               	clrf	_j+1
   687     071F                     l822:
   688     071F  0877               	movf	_j,w
   689     0720  3E20               	addlw	(low (_tra| 0))& (0+255)
   690     0721  0084               	movwf	4
   691     0722  1383               	bcf	3,7	;select IRP bank0
   692     0723  0800               	movf	0,w
   693     0724  120A  118A  2659  120A  118A  	fcall	_Lcd_Data
   694     0729                     l824:
   695     0729  3001               	movlw	1
   696     072A  07F7               	addwf	_j,f
   697     072B  1803               	skipnc
   698     072C  0AF8               	incf	_j+1,f
   699     072D  3000               	movlw	0
   700     072E  07F8               	addwf	_j+1,f
   701     072F                     l826:
   702     072F  0878               	movf	_j+1,w
   703     0730  3A80               	xorlw	128
   704     0731  00FF               	movwf	btemp+1
   705     0732  3080               	movlw	128
   706     0733  027F               	subwf	btemp+1,w
   707     0734  1D03               	skipz
   708     0735  2F38               	goto	u55
   709     0736  300E               	movlw	14
   710     0737  0277               	subwf	_j,w
   711     0738                     u55:
   712     0738  1C03               	skipc
   713     0739  2F3B               	goto	u51
   714     073A  2F3C               	goto	u50
   715     073B                     u51:
   716     073B  2F1F               	goto	l822
   717     073C                     u50:
   718     073C                     l64:
   719     073C  0008               	return
   720     073D                     __end_of_init:
   721                           
   722                           	psect	text2
   723     0659                     __ptext2:	
   724 ;; *************** function _Lcd_Data *****************
   725 ;; Defined at:
   726 ;;		line 122 in file "8T_UART_LCD_Receive.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;  i               1    wreg     unsigned char 
   729 ;; Auto vars:     Size  Location     Type
   730 ;;  i               1    2[COMMON] unsigned char 
   731 ;; Return value:  Size  Location     Type
   732 ;;                  1    wreg      void 
   733 ;; Registers used:
   734 ;;		wreg
   735 ;; Tracked objects:
   736 ;;		On entry : 0/0
   737 ;;		On exit  : 0/0
   738 ;;		Unchanged: 0/0
   739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   740 ;;      Params:         0       0       0       0       0
   741 ;;      Locals:         1       0       0       0       0
   742 ;;      Temps:          2       0       0       0       0
   743 ;;      Totals:         3       0       0       0       0
   744 ;;Total ram usage:        3 bytes
   745 ;; Hardware stack levels used: 1
   746 ;; This function calls:
   747 ;;		Nothing
   748 ;; This function is called by:
   749 ;;		_main
   750 ;;		_init
   751 ;; This function uses a non-reentrant model
   752 ;;
   753                           
   754     0659                     _Lcd_Data:	
   755                           ;psect for function _Lcd_Data
   756                           
   757                           
   758                           ;incstack = 0
   759                           ; Regs used in _Lcd_Data: [wreg]
   760                           ;Lcd_Data@i stored from wreg
   761     0659  00F2               	movwf	Lcd_Data@i
   762     065A                     l758:
   763     065A  1283               	bcf	3,5	;RP0=0, select bank0
   764     065B  1303               	bcf	3,6	;RP1=0, select bank0
   765     065C  1586               	bsf	6,3	;volatile
   766     065D                     l760:
   767     065D  0872               	movf	Lcd_Data@i,w
   768     065E  0088               	movwf	8	;volatile
   769     065F                     l762:
   770     065F  1506               	bsf	6,2	;volatile
   771     0660                     l764:
   772     0660  1106               	bcf	6,2	;volatile
   773     0661  30C3               	movlw	195
   774     0662  00F1               	movwf	??_Lcd_Data+1
   775     0663  30CD               	movlw	205
   776     0664  00F0               	movwf	??_Lcd_Data
   777     0665                     u147:
   778     0665  0BF0               	decfsz	??_Lcd_Data,f
   779     0666  2E65               	goto	u147
   780     0667  0BF1               	decfsz	??_Lcd_Data+1,f
   781     0668  2E65               	goto	u147
   782     0669                     l70:
   783     0669  0008               	return
   784     066A                     __end_of_Lcd_Data:
   785                           
   786                           	psect	text3
   787     0648                     __ptext3:	
   788 ;; *************** function _Lcd_Command *****************
   789 ;; Defined at:
   790 ;;		line 115 in file "8T_UART_LCD_Receive.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;  i               1    wreg     unsigned char 
   793 ;; Auto vars:     Size  Location     Type
   794 ;;  i               1    2[COMMON] unsigned char 
   795 ;; Return value:  Size  Location     Type
   796 ;;                  1    wreg      void 
   797 ;; Registers used:
   798 ;;		wreg
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   804 ;;      Params:         0       0       0       0       0
   805 ;;      Locals:         1       0       0       0       0
   806 ;;      Temps:          2       0       0       0       0
   807 ;;      Totals:         3       0       0       0       0
   808 ;;Total ram usage:        3 bytes
   809 ;; Hardware stack levels used: 1
   810 ;; This function calls:
   811 ;;		Nothing
   812 ;; This function is called by:
   813 ;;		_main
   814 ;;		_init
   815 ;; This function uses a non-reentrant model
   816 ;;
   817                           
   818     0648                     _Lcd_Command:	
   819                           ;psect for function _Lcd_Command
   820                           
   821                           
   822                           ;incstack = 0
   823                           ; Regs used in _Lcd_Command: [wreg]
   824                           ;Lcd_Command@i stored from wreg
   825     0648  00F2               	movwf	Lcd_Command@i
   826     0649                     l750:
   827     0649  1283               	bcf	3,5	;RP0=0, select bank0
   828     064A  1303               	bcf	3,6	;RP1=0, select bank0
   829     064B  1186               	bcf	6,3	;volatile
   830     064C                     l752:
   831     064C  0872               	movf	Lcd_Command@i,w
   832     064D  0088               	movwf	8	;volatile
   833     064E                     l754:
   834     064E  1506               	bsf	6,2	;volatile
   835     064F                     l756:
   836     064F  1106               	bcf	6,2	;volatile
   837     0650  30C3               	movlw	195
   838     0651  00F1               	movwf	??_Lcd_Command+1
   839     0652  30CD               	movlw	205
   840     0653  00F0               	movwf	??_Lcd_Command
   841     0654                     u157:
   842     0654  0BF0               	decfsz	??_Lcd_Command,f
   843     0655  2E54               	goto	u157
   844     0656  0BF1               	decfsz	??_Lcd_Command+1,f
   845     0657  2E54               	goto	u157
   846     0658                     l67:
   847     0658  0008               	return
   848     0659                     __end_of_Lcd_Command:
   849     007E                     btemp	set	126	;btemp
   850     007E                     wtemp0	set	126
   851                           
   852                           	psect	config
   853                           
   854                           ;Config register CONFIG @ 0x2007
   855                           ;	Oscillator Selection bits
   856                           ;	FOSC = EXTRC, RC oscillator
   857                           ;	Watchdog Timer Enable bit
   858                           ;	WDTE = OFF, WDT disabled
   859                           ;	Power-up Timer Enable bit
   860                           ;	PWRTE = OFF, PWRT disabled
   861                           ;	Brown-out Reset Enable bit
   862                           ;	BOREN = OFF, BOR disabled
   863                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   864                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   865                           ;	Data EEPROM Memory Code Protection bit
   866                           ;	CPD = OFF, Data EEPROM code protection off
   867                           ;	Flash Program Memory Write Enable bits
   868                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   869                           ;	In-Circuit Debugger Mode bit
   870                           ;	DEBUG = 0x1, unprogrammed default
   871                           ;	Flash Program Memory Code Protection bit
   872                           ;	CP = OFF, Code protection off
   873     2007                     	org	8199
   874     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        28
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      12
    BANK0            80      0      28
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_init
    _init->_Lcd_Command
    _init->_Lcd_Data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0      88
                                              5 COMMON     2     2      0
                        _Lcd_Command
                           _Lcd_Data
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0      44
                                              3 COMMON     2     2      0
                        _Lcd_Command
                           _Lcd_Data
 ---------------------------------------------------------------------------------
 (2) _Lcd_Data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Command
   _Lcd_Data
   _init
     _Lcd_Command
     _Lcd_Data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      1C       5       35.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      28      12        0.0%
ABS                  0      0      28       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Feb 03 00:25:24 2024

                      _i 0079                        _j 0077                        pc 0002  
                     l70 0669                       l64 073C                       l67 0658  
                     u40 0717                       u41 0716                       u50 073C  
                     u51 073B                       u60 0748                       u45 0713  
                     u61 0747                       u55 0738                       u77 076B  
                     u87 07E1                       u97 06B6                       fsr 0004  
                    l800 06F2                      l810 0704                      l802 06F8  
                    l812 070A                      l750 0649                      l822 071F  
                    l814 0717                      l830 0742                      l752 064C  
                    l760 065D                      l824 0729                      l816 071D  
                    l808 06FA                      l840 0770                      l832 0748  
                    l754 064E                      l762 065F                      l826 072F  
                    l770 06A3                      l850 07AA                      l842 0788  
                    l834 074B                      l756 064F                      l764 0660  
                    l780 06AC                      l772 06A6                      l852 07C2  
                    l844 078D                      l836 0763                      l860 07DD  
                    l828 073D                      l758 065A                      l790 06CE  
                    l782 06B2                      l774 06A7                      l766 0699  
                    l846 07A5                      l838 0767                      l792 06D6  
                    l784 06BA                      l776 06AA                      l768 069F  
                    l794 06DC                      l786 06C0                      l778 06AB  
                    l858 07C7                      l796 06E4                      l788 06C8  
                    l798 06EA                      l886 07CF                      _RB2 0032  
                    _RB3 0033                      u107 06C4                      u117 06D2  
                    u127 06E0                      u137 06EE                      u147 0665  
                    u157 0654                      _rec 002E                      _tra 0020  
                    fsr0 0004                      indf 0000      __end_of_Lcd_Command 0659  
                   _RCIF 0065                     _main 073D                     _init 0699  
                   btemp 007E                     start 0000                    ?_main 0070  
                  ?_init 0070                    _RCREG 001A                    _RCSTA 0018  
                  _SPBRG 0099                    _PORTD 0008                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    _TXREG 0019  
                  _TXSTA 0098                    pclath 000A                    status 0003  
                  wtemp0 007E         __end_of_Lcd_Data 066A          __initialization 07E9  
           __end_of_main 07E9             __end_of_init 073D              _Lcd_Command 0648  
                 ??_main 0075                   ??_init 0073  __end_of__initialization 07FC  
         __pcstackCOMMON 0070             __pidataBANK0 067D                ?_Lcd_Data 0070  
             __pmaintext 073D               ??_Lcd_Data 0070             ?_Lcd_Command 0070  
                __ptext1 0699                  __ptext2 0659                  __ptext3 0648  
                _rec_val 007B     end_of_initialization 07FC                Lcd_Data@i 0072  
    start_initialization 07E9               init_fetch0 066A              __pdataBANK0 0020  
            __pbssCOMMON 0077                ___latbits 0002             Lcd_Command@i 0072  
               _Lcd_Data 0659                 init_ram0 066E            ??_Lcd_Command 0070  
