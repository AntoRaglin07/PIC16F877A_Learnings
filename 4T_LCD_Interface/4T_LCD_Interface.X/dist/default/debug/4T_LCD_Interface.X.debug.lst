

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Jan 06 20:52:34 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 22/03/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     0007                     	;# 
    60     0008                     	;# 
    61     0009                     	;# 
    62     000A                     	;# 
    63     000B                     	;# 
    64     000C                     	;# 
    65     000D                     	;# 
    66     000E                     	;# 
    67     000E                     	;# 
    68     000F                     	;# 
    69     0010                     	;# 
    70     0011                     	;# 
    71     0012                     	;# 
    72     0013                     	;# 
    73     0014                     	;# 
    74     0015                     	;# 
    75     0015                     	;# 
    76     0016                     	;# 
    77     0017                     	;# 
    78     0018                     	;# 
    79     0019                     	;# 
    80     001A                     	;# 
    81     001B                     	;# 
    82     001B                     	;# 
    83     001C                     	;# 
    84     001D                     	;# 
    85     001E                     	;# 
    86     001F                     	;# 
    87     0081                     	;# 
    88     0085                     	;# 
    89     0086                     	;# 
    90     0087                     	;# 
    91     0088                     	;# 
    92     0089                     	;# 
    93     008C                     	;# 
    94     008D                     	;# 
    95     008E                     	;# 
    96     0091                     	;# 
    97     0092                     	;# 
    98     0093                     	;# 
    99     0094                     	;# 
   100     0098                     	;# 
   101     0099                     	;# 
   102     009C                     	;# 
   103     009D                     	;# 
   104     009E                     	;# 
   105     009F                     	;# 
   106     010C                     	;# 
   107     010D                     	;# 
   108     010E                     	;# 
   109     010F                     	;# 
   110     018C                     	;# 
   111     018D                     	;# 
   112     0000                     	;# 
   113     0001                     	;# 
   114     0002                     	;# 
   115     0003                     	;# 
   116     0004                     	;# 
   117     0005                     	;# 
   118     0006                     	;# 
   119     0007                     	;# 
   120     0008                     	;# 
   121     0009                     	;# 
   122     000A                     	;# 
   123     000B                     	;# 
   124     000C                     	;# 
   125     000D                     	;# 
   126     000E                     	;# 
   127     000E                     	;# 
   128     000F                     	;# 
   129     0010                     	;# 
   130     0011                     	;# 
   131     0012                     	;# 
   132     0013                     	;# 
   133     0014                     	;# 
   134     0015                     	;# 
   135     0015                     	;# 
   136     0016                     	;# 
   137     0017                     	;# 
   138     0018                     	;# 
   139     0019                     	;# 
   140     001A                     	;# 
   141     001B                     	;# 
   142     001B                     	;# 
   143     001C                     	;# 
   144     001D                     	;# 
   145     001E                     	;# 
   146     001F                     	;# 
   147     0081                     	;# 
   148     0085                     	;# 
   149     0086                     	;# 
   150     0087                     	;# 
   151     0088                     	;# 
   152     0089                     	;# 
   153     008C                     	;# 
   154     008D                     	;# 
   155     008E                     	;# 
   156     0091                     	;# 
   157     0092                     	;# 
   158     0093                     	;# 
   159     0094                     	;# 
   160     0098                     	;# 
   161     0099                     	;# 
   162     009C                     	;# 
   163     009D                     	;# 
   164     009E                     	;# 
   165     009F                     	;# 
   166     010C                     	;# 
   167     010D                     	;# 
   168     010E                     	;# 
   169     010F                     	;# 
   170     018C                     	;# 
   171     018D                     	;# 
   172     0008                     _PORTD	set	8
   173     0007                     _PORTC	set	7
   174     0088                     _TRISD	set	136
   175     0087                     _TRISC	set	135
   176                           
   177                           	psect	cinit
   178     07F3                     start_initialization:	
   179                           ; #config settings
   180                           
   181     07F3                     __initialization:
   182                           
   183                           ; Clear objects allocated to BANK0
   184     07F3  1383               	bcf	3,7	;select IRP bank0
   185     07F4  3020               	movlw	low __pbssBANK0
   186     07F5  0084               	movwf	4
   187     07F6  303C               	movlw	low (__pbssBANK0+28)
   188     07F7  120A  118A  263D  120A  118A  	fcall	clear_ram0
   189     07FC                     end_of_initialization:	
   190                           ;End of C runtime variable initialization code
   191                           
   192     07FC                     __end_of__initialization:
   193     07FC  0183               	clrf	3
   194     07FD  120A  118A  2F89   	ljmp	_main	;jump to C main() function
   195                           
   196                           	psect	bssBANK0
   197     0020                     __pbssBANK0:
   198     0020                     _k:
   199     0020                     	ds	10
   200     002A                     _n:
   201     002A                     	ds	2
   202     002C                     _m:
   203     002C                     	ds	2
   204     002E                     _delaycount:
   205     002E                     	ds	2
   206     0030                     _sum:
   207     0030                     	ds	2
   208     0032                     _num2:
   209     0032                     	ds	2
   210     0034                     _num1:
   211     0034                     	ds	2
   212     0036                     _Minus:
   213     0036                     	ds	1
   214     0037                     _Plus:
   215     0037                     	ds	1
   216     0038                     _Equal:
   217     0038                     	ds	1
   218     0039                     _j:
   219     0039                     	ds	1
   220     003A                     _i:
   221     003A                     	ds	1
   222     003B                     _x:
   223     003B                     	ds	1
   224                           
   225                           	psect	clrtext
   226     063D                     clear_ram0:	
   227                           ;	Called with FSR containing the base address, and
   228                           ;	W with the last address+1
   229                           
   230     063D  0064               	clrwdt	;clear the watchdog before getting into this loop
   231     063E                     clrloop0:
   232     063E  0180               	clrf	0	;clear RAM location pointed to by FSR
   233     063F  0A84               	incf	4,f	;increment pointer
   234     0640  0604               	xorwf	4,w	;XOR with final address
   235     0641  1903               	btfsc	3,2	;have we reached the end yet?
   236     0642  3400               	retlw	0	;all done for this memory range, return
   237     0643  0604               	xorwf	4,w	;XOR again to restore value
   238     0644  2E3E               	goto	clrloop0	;do the next byte
   239                           
   240                           	psect	cstackCOMMON
   241     0070                     __pcstackCOMMON:
   242     0070                     ?_init:
   243     0070                     ?_Lcd_Command:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     ??_Lcd_Command:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0070                     ?_Lcd_Data:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0070                     ??_Lcd_Data:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0070                     ?_main:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0070                     ?___lwdiv:	
   259                           ; 1 bytes @ 0x0
   260                           
   261     0070                     ___lwdiv@divisor:	
   262                           ; 2 bytes @ 0x0
   263                           
   264                           
   265                           ; 2 bytes @ 0x0
   266     0070                     	ds	2
   267     0072                     Lcd_Command@i:
   268     0072                     Lcd_Data@i:	
   269                           ; 1 bytes @ 0x2
   270                           
   271     0072                     ___lwdiv@dividend:	
   272                           ; 1 bytes @ 0x2
   273                           
   274                           
   275                           ; 2 bytes @ 0x2
   276     0072                     	ds	1
   277     0073                     ??_init:
   278                           
   279                           ; 1 bytes @ 0x3
   280     0073                     	ds	1
   281     0074                     ??___lwdiv:
   282     0074                     ___lwdiv@quotient:	
   283                           ; 1 bytes @ 0x4
   284                           
   285                           
   286                           ; 2 bytes @ 0x4
   287     0074                     	ds	2
   288     0076                     ___lwdiv@counter:
   289                           
   290                           ; 1 bytes @ 0x6
   291     0076                     	ds	1
   292     0077                     ?___bmul:
   293     0077                     ___bmul@multiplicand:	
   294                           ; 1 bytes @ 0x7
   295                           
   296                           
   297                           ; 1 bytes @ 0x7
   298     0077                     	ds	1
   299     0078                     ??___bmul:
   300     0078                     ___bmul@product:	
   301                           ; 1 bytes @ 0x8
   302                           
   303                           
   304                           ; 1 bytes @ 0x8
   305     0078                     	ds	1
   306     0079                     ___bmul@multiplier:
   307                           
   308                           ; 1 bytes @ 0x9
   309     0079                     	ds	1
   310     007A                     ?_Lcd_Output:
   311     007A                     Lcd_Output@i:	
   312                           ; 1 bytes @ 0xA
   313                           
   314                           
   315                           ; 2 bytes @ 0xA
   316     007A                     	ds	2
   317     007C                     ??_Lcd_Output:
   318     007C                     Lcd_Output@s:	
   319                           ; 1 bytes @ 0xC
   320                           
   321                           
   322                           ; 1 bytes @ 0xC
   323     007C                     	ds	1
   324     007D                     Lcd_Output@j:
   325                           
   326                           ; 1 bytes @ 0xD
   327     007D                     	ds	1
   328     007E                     ??_main:
   329                           
   330                           	psect	maintext
   331     0789                     __pmaintext:	
   332                           ; 1 bytes @ 0xE
   333 ;;
   334 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   335 ;;
   336 ;; *************** function _main *****************
   337 ;; Defined at:
   338 ;;		line 25 in file "newmain.c"
   339 ;; Parameters:    Size  Location     Type
   340 ;;		None
   341 ;; Auto vars:     Size  Location     Type
   342 ;;		None
   343 ;; Return value:  Size  Location     Type
   344 ;;                  1    wreg      void 
   345 ;; Registers used:
   346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   347 ;; Tracked objects:
   348 ;;		On entry : B00/0
   349 ;;		On exit  : 0/0
   350 ;;		Unchanged: 0/0
   351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   352 ;;      Params:         0       0       0       0       0
   353 ;;      Locals:         0       0       0       0       0
   354 ;;      Temps:          0       0       0       0       0
   355 ;;      Totals:         0       0       0       0       0
   356 ;;Total ram usage:        0 bytes
   357 ;; Hardware stack levels required when called: 2
   358 ;; This function calls:
   359 ;;		_Lcd_Command
   360 ;;		_Lcd_Data
   361 ;;		_Lcd_Output
   362 ;;		_init
   363 ;; This function is called by:
   364 ;;		Startup code after reset
   365 ;; This function uses a non-reentrant model
   366 ;;
   367                           
   368     0789                     _main:	
   369                           ;psect for function _main
   370                           
   371     0789                     l884:	
   372                           ;incstack = 0
   373                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   374                           
   375                           
   376                           ;newmain.c: 27:     init();
   377     0789  120A  118A  26C9  120A  118A  	fcall	_init
   378     078E                     l886:
   379                           
   380                           ;newmain.c: 28:     num1=100;
   381     078E  3064               	movlw	100
   382     078F  1283               	bcf	3,5	;RP0=0, select bank0
   383     0790  1303               	bcf	3,6	;RP1=0, select bank0
   384     0791  00B4               	movwf	_num1
   385     0792  3000               	movlw	0
   386     0793  00B5               	movwf	_num1+1
   387     0794                     l888:
   388                           
   389                           ;newmain.c: 29:     num2=200;
   390     0794  30C8               	movlw	200
   391     0795  00B2               	movwf	_num2
   392     0796  3000               	movlw	0
   393     0797  00B3               	movwf	_num2+1
   394     0798                     l890:
   395                           
   396                           ;newmain.c: 30:     Equal = '=';
   397     0798  303D               	movlw	61
   398     0799  00B8               	movwf	_Equal
   399     079A                     l892:
   400                           
   401                           ;newmain.c: 31:     Plus = '+';
   402     079A  302B               	movlw	43
   403     079B  00B7               	movwf	_Plus
   404     079C                     l894:
   405                           
   406                           ;newmain.c: 32:     Minus = '-';
   407     079C  302D               	movlw	45
   408     079D  00B6               	movwf	_Minus
   409     079E                     l896:
   410                           
   411                           ;newmain.c: 34:     Lcd_Command(0x80);
   412     079E  3080               	movlw	128
   413     079F  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   414     07A4                     l898:
   415                           
   416                           ;newmain.c: 35:     Lcd_Output(num1);
   417     07A4  3064               	movlw	100
   418     07A5  00FA               	movwf	Lcd_Output@i
   419     07A6  3000               	movlw	0
   420     07A7  00FB               	movwf	Lcd_Output@i+1
   421     07A8  120A  118A  2722  120A  118A  	fcall	_Lcd_Output
   422     07AD                     l900:
   423                           
   424                           ;newmain.c: 36:     Lcd_Command(0x83);
   425     07AD  3083               	movlw	131
   426     07AE  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   427     07B3                     l902:
   428                           
   429                           ;newmain.c: 37:     Lcd_Data(Minus);
   430     07B3  302D               	movlw	45
   431     07B4  120A  118A  2645  120A  118A  	fcall	_Lcd_Data
   432     07B9                     l904:
   433                           
   434                           ;newmain.c: 38:     Lcd_Command(0x84);
   435     07B9  3084               	movlw	132
   436     07BA  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   437     07BF                     l906:
   438                           
   439                           ;newmain.c: 39:     Lcd_Output(num2);
   440     07BF  30C8               	movlw	200
   441     07C0  00FA               	movwf	Lcd_Output@i
   442     07C1  3000               	movlw	0
   443     07C2  00FB               	movwf	Lcd_Output@i+1
   444     07C3  120A  118A  2722  120A  118A  	fcall	_Lcd_Output
   445     07C8                     l908:
   446                           
   447                           ;newmain.c: 40:     Lcd_Command(0x87);
   448     07C8  3087               	movlw	135
   449     07C9  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   450     07CE                     l910:
   451                           
   452                           ;newmain.c: 41:     Lcd_Data(Equal);
   453     07CE  303D               	movlw	61
   454     07CF  120A  118A  2645  120A  118A  	fcall	_Lcd_Data
   455     07D4                     l918:
   456     07D4                     l920:
   457                           
   458                           ;newmain.c: 51:     Lcd_Command(0x88);
   459     07D4  3088               	movlw	136
   460     07D5  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   461                           
   462                           ;newmain.c: 52:     Lcd_Data(Minus);
   463     07DA  302D               	movlw	45
   464     07DB  120A  118A  2645  120A  118A  	fcall	_Lcd_Data
   465                           
   466                           ;newmain.c: 53:     Lcd_Command(0x89);
   467     07E0  3089               	movlw	137
   468     07E1  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   469     07E6                     l922:
   470                           
   471                           ;newmain.c: 54:     Lcd_Output(num2-num1);
   472     07E6  3064               	movlw	100
   473     07E7  00FA               	movwf	Lcd_Output@i
   474     07E8  3000               	movlw	0
   475     07E9  00FB               	movwf	Lcd_Output@i+1
   476     07EA  120A  118A  2722  120A  118A  	fcall	_Lcd_Output
   477     07EF                     l53:	
   478                           ;newmain.c: 62:     while(1);
   479                           
   480     07EF  2FEF               	goto	l53
   481     07F0  120A  118A  2800   	ljmp	start
   482     07F3                     __end_of_main:
   483                           
   484                           	psect	text1
   485     06C9                     __ptext1:	
   486 ;; *************** function _init *****************
   487 ;; Defined at:
   488 ;;		line 84 in file "newmain.c"
   489 ;; Parameters:    Size  Location     Type
   490 ;;		None
   491 ;; Auto vars:     Size  Location     Type
   492 ;;		None
   493 ;; Return value:  Size  Location     Type
   494 ;;                  1    wreg      void 
   495 ;; Registers used:
   496 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   497 ;; Tracked objects:
   498 ;;		On entry : 0/0
   499 ;;		On exit  : 0/0
   500 ;;		Unchanged: 0/0
   501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   502 ;;      Params:         0       0       0       0       0
   503 ;;      Locals:         0       0       0       0       0
   504 ;;      Temps:          2       0       0       0       0
   505 ;;      Totals:         2       0       0       0       0
   506 ;;Total ram usage:        2 bytes
   507 ;; Hardware stack levels used: 1
   508 ;; Hardware stack levels required when called: 1
   509 ;; This function calls:
   510 ;;		_Lcd_Command
   511 ;; This function is called by:
   512 ;;		_main
   513 ;; This function uses a non-reentrant model
   514 ;;
   515                           
   516     06C9                     _init:	
   517                           ;psect for function _init
   518                           
   519     06C9                     l832:	
   520                           ;incstack = 0
   521                           ; Regs used in _init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   522                           
   523                           
   524                           ;newmain.c: 85:     TRISC = 0x00;
   525     06C9  1683               	bsf	3,5	;RP0=1, select bank1
   526     06CA  1303               	bcf	3,6	;RP1=0, select bank1
   527     06CB  0187               	clrf	7	;volatile
   528                           
   529                           ;newmain.c: 86:     TRISD = 0x00;
   530     06CC  0188               	clrf	8	;volatile
   531     06CD                     l834:
   532                           
   533                           ;newmain.c: 88:     Lcd_Command(0x30);
   534     06CD  3030               	movlw	48
   535     06CE  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   536     06D3                     l836:
   537                           
   538                           ;newmain.c: 89:     _delay((unsigned long)((100)*(6000000/4000.0)));
   539     06D3  30C3               	movlw	195
   540     06D4  00F4               	movwf	??_init+1
   541     06D5  30CD               	movlw	205
   542     06D6  00F3               	movwf	??_init
   543     06D7                     u237:
   544     06D7  0BF3               	decfsz	??_init,f
   545     06D8  2ED7               	goto	u237
   546     06D9  0BF4               	decfsz	??_init+1,f
   547     06DA  2ED7               	goto	u237
   548     06DB                     l838:
   549                           
   550                           ;newmain.c: 90:     Lcd_Command(0x30);
   551     06DB  3030               	movlw	48
   552     06DC  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   553     06E1                     l840:
   554                           
   555                           ;newmain.c: 91:     _delay((unsigned long)((100)*(6000000/4000.0)));
   556     06E1  30C3               	movlw	195
   557     06E2  00F4               	movwf	??_init+1
   558     06E3  30CD               	movlw	205
   559     06E4  00F3               	movwf	??_init
   560     06E5                     u247:
   561     06E5  0BF3               	decfsz	??_init,f
   562     06E6  2EE5               	goto	u247
   563     06E7  0BF4               	decfsz	??_init+1,f
   564     06E8  2EE5               	goto	u247
   565     06E9                     l842:
   566                           
   567                           ;newmain.c: 92:     Lcd_Command(0x30);
   568     06E9  3030               	movlw	48
   569     06EA  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   570     06EF                     l844:
   571                           
   572                           ;newmain.c: 93:     _delay((unsigned long)((100)*(6000000/4000.0)));
   573     06EF  30C3               	movlw	195
   574     06F0  00F4               	movwf	??_init+1
   575     06F1  30CD               	movlw	205
   576     06F2  00F3               	movwf	??_init
   577     06F3                     u257:
   578     06F3  0BF3               	decfsz	??_init,f
   579     06F4  2EF3               	goto	u257
   580     06F5  0BF4               	decfsz	??_init+1,f
   581     06F6  2EF3               	goto	u257
   582     06F7                     l846:
   583                           
   584                           ;newmain.c: 94:     Lcd_Command(0x38);
   585     06F7  3038               	movlw	56
   586     06F8  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   587     06FD                     l848:
   588                           
   589                           ;newmain.c: 95:     _delay((unsigned long)((100)*(6000000/4000.0)));
   590     06FD  30C3               	movlw	195
   591     06FE  00F4               	movwf	??_init+1
   592     06FF  30CD               	movlw	205
   593     0700  00F3               	movwf	??_init
   594     0701                     u267:
   595     0701  0BF3               	decfsz	??_init,f
   596     0702  2F01               	goto	u267
   597     0703  0BF4               	decfsz	??_init+1,f
   598     0704  2F01               	goto	u267
   599     0705                     l850:
   600                           
   601                           ;newmain.c: 96:         Lcd_Command(0x0C);
   602     0705  300C               	movlw	12
   603     0706  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   604     070B                     l852:
   605                           
   606                           ;newmain.c: 97:     _delay((unsigned long)((100)*(6000000/4000.0)));
   607     070B  30C3               	movlw	195
   608     070C  00F4               	movwf	??_init+1
   609     070D  30CD               	movlw	205
   610     070E  00F3               	movwf	??_init
   611     070F                     u277:
   612     070F  0BF3               	decfsz	??_init,f
   613     0710  2F0F               	goto	u277
   614     0711  0BF4               	decfsz	??_init+1,f
   615     0712  2F0F               	goto	u277
   616     0713                     l854:
   617                           
   618                           ;newmain.c: 98:         Lcd_Command(0x01);
   619     0713  3001               	movlw	1
   620     0714  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   621     0719                     l856:
   622                           
   623                           ;newmain.c: 99:     _delay((unsigned long)((100)*(6000000/4000.0)));
   624     0719  30C3               	movlw	195
   625     071A  00F4               	movwf	??_init+1
   626     071B  30CD               	movlw	205
   627     071C  00F3               	movwf	??_init
   628     071D                     u287:
   629     071D  0BF3               	decfsz	??_init,f
   630     071E  2F1D               	goto	u287
   631     071F  0BF4               	decfsz	??_init+1,f
   632     0720  2F1D               	goto	u287
   633     0721                     l68:
   634     0721  0008               	return
   635     0722                     __end_of_init:
   636                           
   637                           	psect	text2
   638     066E                     __ptext2:	
   639 ;; *************** function _Lcd_Command *****************
   640 ;; Defined at:
   641 ;;		line 103 in file "newmain.c"
   642 ;; Parameters:    Size  Location     Type
   643 ;;  i               1    wreg     unsigned char 
   644 ;; Auto vars:     Size  Location     Type
   645 ;;  i               1    2[COMMON] unsigned char 
   646 ;; Return value:  Size  Location     Type
   647 ;;                  1    wreg      void 
   648 ;; Registers used:
   649 ;;		wreg, status,2, status,0, btemp+1
   650 ;; Tracked objects:
   651 ;;		On entry : 0/0
   652 ;;		On exit  : 0/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   655 ;;      Params:         0       0       0       0       0
   656 ;;      Locals:         1       0       0       0       0
   657 ;;      Temps:          2       0       0       0       0
   658 ;;      Totals:         3       0       0       0       0
   659 ;;Total ram usage:        3 bytes
   660 ;; Hardware stack levels used: 1
   661 ;; This function calls:
   662 ;;		Nothing
   663 ;; This function is called by:
   664 ;;		_main
   665 ;;		_init
   666 ;; This function uses a non-reentrant model
   667 ;;
   668                           
   669     066E                     _Lcd_Command:	
   670                           ;psect for function _Lcd_Command
   671                           
   672                           
   673                           ;incstack = 0
   674                           ; Regs used in _Lcd_Command: [wreg+status,2+status,0+btemp+1]
   675                           ;Lcd_Command@i stored from wreg
   676     066E  00F2               	movwf	Lcd_Command@i
   677     066F                     l772:
   678                           
   679                           ;newmain.c: 104:     PORTC &= 0xF7;
   680     066F  30F7               	movlw	247
   681     0670  00FF               	movwf	btemp+1
   682     0671  087F               	movf	btemp+1,w
   683     0672  1283               	bcf	3,5	;RP0=0, select bank0
   684     0673  1303               	bcf	3,6	;RP1=0, select bank0
   685     0674  0587               	andwf	7,f	;volatile
   686     0675                     l774:
   687                           
   688                           ;newmain.c: 105:     PORTD=i;
   689     0675  0872               	movf	Lcd_Command@i,w
   690     0676  0088               	movwf	8	;volatile
   691     0677                     l776:
   692                           
   693                           ;newmain.c: 106:     PORTC |= 0x01;
   694     0677  1407               	bsf	7,0	;volatile
   695     0678                     l778:
   696                           
   697                           ;newmain.c: 107:     PORTC &= ~0x01;
   698     0678  30FE               	movlw	254
   699     0679  00FF               	movwf	btemp+1
   700     067A  087F               	movf	btemp+1,w
   701     067B  0587               	andwf	7,f	;volatile
   702                           
   703                           ;newmain.c: 108:     _delay((unsigned long)((100)*(6000000/4000.0)));
   704     067C  30C3               	movlw	195
   705     067D  00F1               	movwf	??_Lcd_Command+1
   706     067E  30CD               	movlw	205
   707     067F  00F0               	movwf	??_Lcd_Command
   708     0680                     u297:
   709     0680  0BF0               	decfsz	??_Lcd_Command,f
   710     0681  2E80               	goto	u297
   711     0682  0BF1               	decfsz	??_Lcd_Command+1,f
   712     0683  2E80               	goto	u297
   713     0684                     l71:
   714     0684  0008               	return
   715     0685                     __end_of_Lcd_Command:
   716                           
   717                           	psect	text3
   718     0722                     __ptext3:	
   719 ;; *************** function _Lcd_Output *****************
   720 ;; Defined at:
   721 ;;		line 66 in file "newmain.c"
   722 ;; Parameters:    Size  Location     Type
   723 ;;  i               2   10[COMMON] unsigned int 
   724 ;; Auto vars:     Size  Location     Type
   725 ;;  j               1   13[COMMON] unsigned char 
   726 ;;  s               1   12[COMMON] unsigned char 
   727 ;; Return value:  Size  Location     Type
   728 ;;                  1    wreg      void 
   729 ;; Registers used:
   730 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   731 ;; Tracked objects:
   732 ;;		On entry : 0/0
   733 ;;		On exit  : 0/0
   734 ;;		Unchanged: 0/0
   735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   736 ;;      Params:         2       0       0       0       0
   737 ;;      Locals:         2       0       0       0       0
   738 ;;      Temps:          0       0       0       0       0
   739 ;;      Totals:         4       0       0       0       0
   740 ;;Total ram usage:        4 bytes
   741 ;; Hardware stack levels used: 1
   742 ;; Hardware stack levels required when called: 1
   743 ;; This function calls:
   744 ;;		_Lcd_Data
   745 ;;		___bmul
   746 ;;		___lwdiv
   747 ;; This function is called by:
   748 ;;		_main
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752     0722                     _Lcd_Output:	
   753                           ;psect for function _Lcd_Output
   754                           
   755     0722                     l858:	
   756                           ;incstack = 0
   757                           ; Regs used in _Lcd_Output: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   758                           
   759                           
   760                           ;newmain.c: 67:     unsigned char s, j=1;
   761     0722  01FD               	clrf	Lcd_Output@j
   762     0723  0AFD               	incf	Lcd_Output@j,f
   763     0724                     l860:
   764                           
   765                           ;newmain.c: 68:     m=i;
   766     0724  087B               	movf	Lcd_Output@i+1,w
   767     0725  1283               	bcf	3,5	;RP0=0, select bank0
   768     0726  1303               	bcf	3,6	;RP1=0, select bank0
   769     0727  00AD               	movwf	_m+1
   770     0728  087A               	movf	Lcd_Output@i,w
   771     0729  00AC               	movwf	_m
   772                           
   773                           ;newmain.c: 69:     while(m!=0){
   774     072A  2F61               	goto	l870
   775     072B                     l862:
   776                           
   777                           ;newmain.c: 70:         s= m-((m/10)*10);
   778     072B  30F6               	movlw	246
   779     072C  00F7               	movwf	___bmul@multiplicand
   780     072D  082D               	movf	_m+1,w
   781     072E  00F3               	movwf	___lwdiv@dividend+1
   782     072F  082C               	movf	_m,w
   783     0730  00F2               	movwf	___lwdiv@dividend
   784     0731  300A               	movlw	10
   785     0732  00F0               	movwf	___lwdiv@divisor
   786     0733  3000               	movlw	0
   787     0734  00F1               	movwf	___lwdiv@divisor+1
   788     0735  120A  118A  2685  120A  118A  	fcall	___lwdiv
   789     073A  0870               	movf	?___lwdiv,w
   790     073B  120A  118A  2659  120A  118A  	fcall	___bmul
   791     0740  1283               	bcf	3,5	;RP0=0, select bank0
   792     0741  1303               	bcf	3,6	;RP1=0, select bank0
   793     0742  072C               	addwf	_m,w
   794     0743  00FC               	movwf	Lcd_Output@s
   795     0744                     l864:
   796                           
   797                           ;newmain.c: 71:         k[j]=s;
   798     0744  087D               	movf	Lcd_Output@j,w
   799     0745  3E20               	addlw	(low (_k| 0))& (0+255)
   800     0746  0084               	movwf	4
   801     0747  087C               	movf	Lcd_Output@s,w
   802     0748  1383               	bcf	3,7	;select IRP bank0
   803     0749  0080               	movwf	0
   804     074A                     l866:
   805                           
   806                           ;newmain.c: 72:         j++;
   807     074A  3001               	movlw	1
   808     074B  00FF               	movwf	btemp+1
   809     074C  087F               	movf	btemp+1,w
   810     074D  07FD               	addwf	Lcd_Output@j,f
   811     074E                     l868:
   812                           
   813                           ;newmain.c: 73:         m=m/10;
   814     074E  300A               	movlw	10
   815     074F  00F0               	movwf	___lwdiv@divisor
   816     0750  3000               	movlw	0
   817     0751  00F1               	movwf	___lwdiv@divisor+1
   818     0752  082D               	movf	_m+1,w
   819     0753  00F3               	movwf	___lwdiv@dividend+1
   820     0754  082C               	movf	_m,w
   821     0755  00F2               	movwf	___lwdiv@dividend
   822     0756  120A  118A  2685  120A  118A  	fcall	___lwdiv
   823     075B  0871               	movf	?___lwdiv+1,w
   824     075C  1283               	bcf	3,5	;RP0=0, select bank0
   825     075D  1303               	bcf	3,6	;RP1=0, select bank0
   826     075E  00AD               	movwf	_m+1
   827     075F  0870               	movf	?___lwdiv,w
   828     0760  00AC               	movwf	_m
   829     0761                     l870:
   830                           
   831                           ;newmain.c: 69:     while(m!=0){
   832     0761  082C               	movf	_m,w
   833     0762  042D               	iorwf	_m+1,w
   834     0763  1D03               	btfss	3,2
   835     0764  2F66               	goto	u211
   836     0765  2F67               	goto	u210
   837     0766                     u211:
   838     0766  2F2B               	goto	l862
   839     0767                     u210:
   840     0767                     l872:
   841                           
   842                           ;newmain.c: 75:     k[j]='\0';
   843     0767  087D               	movf	Lcd_Output@j,w
   844     0768  3E20               	addlw	(low (_k| 0))& (0+255)
   845     0769  0084               	movwf	4
   846     076A  1383               	bcf	3,7	;select IRP bank0
   847     076B  0180               	clrf	0
   848     076C                     l874:
   849                           
   850                           ;newmain.c: 76:     j--;
   851     076C  3001               	movlw	1
   852     076D  02FD               	subwf	Lcd_Output@j,f
   853                           
   854                           ;newmain.c: 77:     while(j!=0){
   855     076E  2F83               	goto	l882
   856     076F                     l876:
   857                           
   858                           ;newmain.c: 78:         n=0x30+k[j];
   859     076F  087D               	movf	Lcd_Output@j,w
   860     0770  3E20               	addlw	(low (_k| 0))& (0+255)
   861     0771  0084               	movwf	4
   862     0772  1383               	bcf	3,7	;select IRP bank0
   863     0773  0800               	movf	0,w
   864     0774  3E30               	addlw	48
   865     0775  1283               	bcf	3,5	;RP0=0, select bank0
   866     0776  1303               	bcf	3,6	;RP1=0, select bank0
   867     0777  00AA               	movwf	_n
   868     0778  3000               	movlw	0
   869     0779  1803               	skipnc
   870     077A  3001               	movlw	1
   871     077B  00AB               	movwf	_n+1
   872     077C                     l878:
   873                           
   874                           ;newmain.c: 79:         Lcd_Data(n);
   875     077C  082A               	movf	_n,w
   876     077D  120A  118A  2645  120A  118A  	fcall	_Lcd_Data
   877     0782  2F6C               	goto	l874
   878     0783                     l882:
   879                           
   880                           ;newmain.c: 77:     while(j!=0){
   881     0783  087D               	movf	Lcd_Output@j,w
   882     0784  1D03               	btfss	3,2
   883     0785  2F87               	goto	u221
   884     0786  2F88               	goto	u220
   885     0787                     u221:
   886     0787  2F6F               	goto	l876
   887     0788                     u220:
   888     0788                     l65:
   889     0788  0008               	return
   890     0789                     __end_of_Lcd_Output:
   891                           
   892                           	psect	text4
   893     0685                     __ptext4:	
   894 ;; *************** function ___lwdiv *****************
   895 ;; Defined at:
   896 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;  divisor         2    0[COMMON] unsigned int 
   899 ;;  dividend        2    2[COMMON] unsigned int 
   900 ;; Auto vars:     Size  Location     Type
   901 ;;  quotient        2    4[COMMON] unsigned int 
   902 ;;  counter         1    6[COMMON] unsigned char 
   903 ;; Return value:  Size  Location     Type
   904 ;;                  2    0[COMMON] unsigned int 
   905 ;; Registers used:
   906 ;;		wreg, status,2, status,0, btemp+1
   907 ;; Tracked objects:
   908 ;;		On entry : 0/0
   909 ;;		On exit  : 0/0
   910 ;;		Unchanged: 0/0
   911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   912 ;;      Params:         4       0       0       0       0
   913 ;;      Locals:         3       0       0       0       0
   914 ;;      Temps:          0       0       0       0       0
   915 ;;      Totals:         7       0       0       0       0
   916 ;;Total ram usage:        7 bytes
   917 ;; Hardware stack levels used: 1
   918 ;; This function calls:
   919 ;;		Nothing
   920 ;; This function is called by:
   921 ;;		_Lcd_Output
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925     0685                     ___lwdiv:	
   926                           ;psect for function ___lwdiv
   927                           
   928     0685                     l806:	
   929                           ;incstack = 0
   930                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
   931                           
   932     0685  01F4               	clrf	___lwdiv@quotient
   933     0686  01F5               	clrf	___lwdiv@quotient+1
   934     0687                     l808:
   935     0687  0870               	movf	___lwdiv@divisor,w
   936     0688  0471               	iorwf	___lwdiv@divisor+1,w
   937     0689  1903               	btfsc	3,2
   938     068A  2E8C               	goto	u141
   939     068B  2E8D               	goto	u140
   940     068C                     u141:
   941     068C  2EC4               	goto	l828
   942     068D                     u140:
   943     068D                     l810:
   944     068D  01F6               	clrf	___lwdiv@counter
   945     068E  0AF6               	incf	___lwdiv@counter,f
   946     068F  2E9B               	goto	l816
   947     0690                     l812:
   948     0690  3001               	movlw	1
   949     0691                     u155:
   950     0691  1003               	clrc
   951     0692  0DF0               	rlf	___lwdiv@divisor,f
   952     0693  0DF1               	rlf	___lwdiv@divisor+1,f
   953     0694  3EFF               	addlw	-1
   954     0695  1D03               	skipz
   955     0696  2E91               	goto	u155
   956     0697                     l814:
   957     0697  3001               	movlw	1
   958     0698  00FF               	movwf	btemp+1
   959     0699  087F               	movf	btemp+1,w
   960     069A  07F6               	addwf	___lwdiv@counter,f
   961     069B                     l816:
   962     069B  1FF1               	btfss	___lwdiv@divisor+1,7
   963     069C  2E9E               	goto	u161
   964     069D  2E9F               	goto	u160
   965     069E                     u161:
   966     069E  2E90               	goto	l812
   967     069F                     u160:
   968     069F                     l818:
   969     069F  3001               	movlw	1
   970     06A0                     u175:
   971     06A0  1003               	clrc
   972     06A1  0DF4               	rlf	___lwdiv@quotient,f
   973     06A2  0DF5               	rlf	___lwdiv@quotient+1,f
   974     06A3  3EFF               	addlw	-1
   975     06A4  1D03               	skipz
   976     06A5  2EA0               	goto	u175
   977     06A6  0871               	movf	___lwdiv@divisor+1,w
   978     06A7  0273               	subwf	___lwdiv@dividend+1,w
   979     06A8  1D03               	skipz
   980     06A9  2EAC               	goto	u185
   981     06AA  0870               	movf	___lwdiv@divisor,w
   982     06AB  0272               	subwf	___lwdiv@dividend,w
   983     06AC                     u185:
   984     06AC  1C03               	skipc
   985     06AD  2EAF               	goto	u181
   986     06AE  2EB0               	goto	u180
   987     06AF                     u181:
   988     06AF  2EB7               	goto	l824
   989     06B0                     u180:
   990     06B0                     l820:
   991     06B0  0870               	movf	___lwdiv@divisor,w
   992     06B1  02F2               	subwf	___lwdiv@dividend,f
   993     06B2  0871               	movf	___lwdiv@divisor+1,w
   994     06B3  1C03               	skipc
   995     06B4  03F3               	decf	___lwdiv@dividend+1,f
   996     06B5  02F3               	subwf	___lwdiv@dividend+1,f
   997     06B6                     l822:
   998     06B6  1474               	bsf	___lwdiv@quotient,0
   999     06B7                     l824:
  1000     06B7  3001               	movlw	1
  1001     06B8                     u195:
  1002     06B8  1003               	clrc
  1003     06B9  0CF1               	rrf	___lwdiv@divisor+1,f
  1004     06BA  0CF0               	rrf	___lwdiv@divisor,f
  1005     06BB  3EFF               	addlw	-1
  1006     06BC  1D03               	skipz
  1007     06BD  2EB8               	goto	u195
  1008     06BE                     l826:
  1009     06BE  3001               	movlw	1
  1010     06BF  02F6               	subwf	___lwdiv@counter,f
  1011     06C0  1D03               	btfss	3,2
  1012     06C1  2EC3               	goto	u201
  1013     06C2  2EC4               	goto	u200
  1014     06C3                     u201:
  1015     06C3  2E9F               	goto	l818
  1016     06C4                     u200:
  1017     06C4                     l828:
  1018     06C4  0875               	movf	___lwdiv@quotient+1,w
  1019     06C5  00F1               	movwf	?___lwdiv+1
  1020     06C6  0874               	movf	___lwdiv@quotient,w
  1021     06C7  00F0               	movwf	?___lwdiv
  1022     06C8                     l440:
  1023     06C8  0008               	return
  1024     06C9                     __end_of___lwdiv:
  1025                           
  1026                           	psect	text5
  1027     0659                     __ptext5:	
  1028 ;; *************** function ___bmul *****************
  1029 ;; Defined at:
  1030 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul8.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;  multiplier      1    wreg     unsigned char 
  1033 ;;  multiplicand    1    7[COMMON] unsigned char 
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;  multiplier      1    9[COMMON] unsigned char 
  1036 ;;  product         1    8[COMMON] unsigned char 
  1037 ;; Return value:  Size  Location     Type
  1038 ;;                  1    wreg      unsigned char 
  1039 ;; Registers used:
  1040 ;;		wreg, status,2, status,0, btemp+1
  1041 ;; Tracked objects:
  1042 ;;		On entry : 0/0
  1043 ;;		On exit  : 0/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1046 ;;      Params:         1       0       0       0       0
  1047 ;;      Locals:         2       0       0       0       0
  1048 ;;      Temps:          0       0       0       0       0
  1049 ;;      Totals:         3       0       0       0       0
  1050 ;;Total ram usage:        3 bytes
  1051 ;; Hardware stack levels used: 1
  1052 ;; This function calls:
  1053 ;;		Nothing
  1054 ;; This function is called by:
  1055 ;;		_Lcd_Output
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059     0659                     ___bmul:	
  1060                           ;psect for function ___bmul
  1061                           
  1062                           
  1063                           ;incstack = 0
  1064                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  1065                           ;___bmul@multiplier stored from wreg
  1066     0659  00F9               	movwf	___bmul@multiplier
  1067     065A                     l790:
  1068     065A  01F8               	clrf	___bmul@product
  1069     065B                     l792:
  1070     065B  1C79               	btfss	___bmul@multiplier,0
  1071     065C  2E5E               	goto	u121
  1072     065D  2E5F               	goto	u120
  1073     065E                     u121:
  1074     065E  2E63               	goto	l796
  1075     065F                     u120:
  1076     065F                     l794:
  1077     065F  0877               	movf	___bmul@multiplicand,w
  1078     0660  00FF               	movwf	btemp+1
  1079     0661  087F               	movf	btemp+1,w
  1080     0662  07F8               	addwf	___bmul@product,f
  1081     0663                     l796:
  1082     0663  1003               	clrc
  1083     0664  0DF7               	rlf	___bmul@multiplicand,f
  1084     0665                     l798:
  1085     0665  1003               	clrc
  1086     0666  0CF9               	rrf	___bmul@multiplier,f
  1087     0667                     l800:
  1088     0667  0879               	movf	___bmul@multiplier,w
  1089     0668  1D03               	btfss	3,2
  1090     0669  2E6B               	goto	u131
  1091     066A  2E6C               	goto	u130
  1092     066B                     u131:
  1093     066B  2E5B               	goto	l792
  1094     066C                     u130:
  1095     066C                     l802:
  1096     066C  0878               	movf	___bmul@product,w
  1097     066D                     l186:
  1098     066D  0008               	return
  1099     066E                     __end_of___bmul:
  1100                           
  1101                           	psect	text6
  1102     0645                     __ptext6:	
  1103 ;; *************** function _Lcd_Data *****************
  1104 ;; Defined at:
  1105 ;;		line 110 in file "newmain.c"
  1106 ;; Parameters:    Size  Location     Type
  1107 ;;  i               1    wreg     unsigned char 
  1108 ;; Auto vars:     Size  Location     Type
  1109 ;;  i               1    2[COMMON] unsigned char 
  1110 ;; Return value:  Size  Location     Type
  1111 ;;                  1    wreg      void 
  1112 ;; Registers used:
  1113 ;;		wreg, status,2, status,0, btemp+1
  1114 ;; Tracked objects:
  1115 ;;		On entry : 0/0
  1116 ;;		On exit  : 0/0
  1117 ;;		Unchanged: 0/0
  1118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1119 ;;      Params:         0       0       0       0       0
  1120 ;;      Locals:         1       0       0       0       0
  1121 ;;      Temps:          2       0       0       0       0
  1122 ;;      Totals:         3       0       0       0       0
  1123 ;;Total ram usage:        3 bytes
  1124 ;; Hardware stack levels used: 1
  1125 ;; This function calls:
  1126 ;;		Nothing
  1127 ;; This function is called by:
  1128 ;;		_main
  1129 ;;		_Lcd_Output
  1130 ;; This function uses a non-reentrant model
  1131 ;;
  1132                           
  1133     0645                     _Lcd_Data:	
  1134                           ;psect for function _Lcd_Data
  1135                           
  1136                           
  1137                           ;incstack = 0
  1138                           ; Regs used in _Lcd_Data: [wreg+status,2+status,0+btemp+1]
  1139                           ;Lcd_Data@i stored from wreg
  1140     0645  00F2               	movwf	Lcd_Data@i
  1141     0646                     l780:
  1142                           
  1143                           ;newmain.c: 111:     PORTC |= 0x08;
  1144     0646  1283               	bcf	3,5	;RP0=0, select bank0
  1145     0647  1303               	bcf	3,6	;RP1=0, select bank0
  1146     0648  1587               	bsf	7,3	;volatile
  1147     0649                     l782:
  1148                           
  1149                           ;newmain.c: 112:     PORTD=i;
  1150     0649  0872               	movf	Lcd_Data@i,w
  1151     064A  0088               	movwf	8	;volatile
  1152     064B                     l784:
  1153                           
  1154                           ;newmain.c: 113:     PORTC |= 0x01;
  1155     064B  1407               	bsf	7,0	;volatile
  1156     064C                     l786:
  1157                           
  1158                           ;newmain.c: 114:     PORTC &= ~0x01;
  1159     064C  30FE               	movlw	254
  1160     064D  00FF               	movwf	btemp+1
  1161     064E  087F               	movf	btemp+1,w
  1162     064F  0587               	andwf	7,f	;volatile
  1163     0650                     l788:
  1164                           
  1165                           ;newmain.c: 115:     _delay((unsigned long)((100)*(6000000/4000.0)));
  1166     0650  30C3               	movlw	195
  1167     0651  00F1               	movwf	??_Lcd_Data+1
  1168     0652  30CD               	movlw	205
  1169     0653  00F0               	movwf	??_Lcd_Data
  1170     0654                     u307:
  1171     0654  0BF0               	decfsz	??_Lcd_Data,f
  1172     0655  2E54               	goto	u307
  1173     0656  0BF1               	decfsz	??_Lcd_Data+1,f
  1174     0657  2E54               	goto	u307
  1175     0658                     l74:
  1176     0658  0008               	return
  1177     0659                     __end_of_Lcd_Data:
  1178     007E                     btemp	set	126	;btemp
  1179     007E                     wtemp0	set	126
  1180                           
  1181                           	psect	config
  1182                           
  1183                           ;Config register CONFIG @ 0x2007
  1184                           ;	Oscillator Selection bits
  1185                           ;	FOSC = EXTRC, RC oscillator
  1186                           ;	Watchdog Timer Enable bit
  1187                           ;	WDTE = OFF, WDT disabled
  1188                           ;	Power-up Timer Enable bit
  1189                           ;	PWRTE = OFF, PWRT disabled
  1190                           ;	Brown-out Reset Enable bit
  1191                           ;	BOREN = OFF, BOR disabled
  1192                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1193                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1194                           ;	Data EEPROM Memory Code Protection bit
  1195                           ;	CPD = OFF, Data EEPROM code protection off
  1196                           ;	Flash Program Memory Write Enable bits
  1197                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1198                           ;	In-Circuit Debugger Mode bit
  1199                           ;	DEBUG = 0x1, unprogrammed default
  1200                           ;	Flash Program Memory Code Protection bit
  1201                           ;	CP = OFF, Code protection off
  1202     2007                     	org	8199
  1203     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0      28
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Lcd_Output
    _init->_Lcd_Command
    _Lcd_Output->___bmul
    ___bmul->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1163
                        _Lcd_Command
                           _Lcd_Data
                         _Lcd_Output
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0      22
                                              3 COMMON     2     2      0
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (2) _Lcd_Command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Output                                           4     2      2    1097
                                             10 COMMON     4     2      2
                           _Lcd_Data
                             ___bmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     168
                                              7 COMMON     3     2      1
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Command
   _Lcd_Data
   _Lcd_Output
     _Lcd_Data
     ___bmul
       ___lwdiv (ARG)
     ___lwdiv
   _init
     _Lcd_Command

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0      1C       5       35.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2A      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Jan 06 20:52:34 2024

                      _i 003A                        _j 0039                        _k 0020  
                      _m 002C                        _n 002A                        _x 003B  
         ___bmul@product 0078                       l53 07EF                       l71 0684  
                     l65 0788                       l74 0658                       l68 0721  
                     fsr 0004                      l440 06C8                      l186 066D  
                    l800 0667                      l802 066C                      l810 068D  
                    l820 06B0                      l812 0690                      l900 07AD  
                    l822 06B6                      l814 0697                      l806 0685  
                    l910 07CE                      l902 07B3                      l824 06B7  
                    l816 069B                      l808 0687                      l840 06E1  
                    l832 06C9                      l920 07D4                      l904 07B9  
                    l826 06BE                      l818 069F                      l850 0705  
                    l842 06E9                      l834 06CD                      l922 07E6  
                    l906 07BF                      l780 0646                      l828 06C4  
                    l860 0724                      l772 066F                      l852 070B  
                    l844 06EF                      l836 06D3                      l908 07C8  
                    l782 0649                      l790 065A                      l862 072B  
                    l870 0761                      l774 0675                      l854 0713  
                    l846 06F7                      l838 06DB                      l918 07D4  
                    l784 064B                      l792 065B                      l872 0767  
                    l864 0744                      l776 0677                      l856 0719  
                    l848 06FD                      l786 064C                      l794 065F  
                    l882 0783                      l874 076C                      l866 074A  
                    l858 0722                      l778 0678                      l890 0798  
                    l788 0650                      l796 0663                      l876 076F  
                    l868 074E                      l892 079A                      l884 0789  
                    l798 0665                      l878 077C                      l894 079C  
                    l886 078E                      l896 079E                      l888 0794  
                    l898 07A4                      u120 065F                      u200 06C4  
                    u121 065E                      u201 06C3                      u130 066C  
                    u210 0767                      u131 066B                      u211 0766  
                    u140 068D                      u220 0788                      u141 068C  
                    u221 0787                      u160 069F                      u161 069E  
                    u307 0654                      u155 0691                      u180 06B0  
                    u181 06AF                      u237 06D7                      u175 06A0  
                    u247 06E5                      u185 06AC                      u257 06F3  
                    u195 06B8                      u267 0701                      u277 070F  
                    u287 071D                      u297 0680                      fsr0 0004  
                    _sum 0030                      indf 0000      __end_of_Lcd_Command 0685  
                   _Plus 0037                     _main 0789                     _init 06C9  
                   _num1 0034                     _num2 0032                     btemp 007E  
                   start 0000        ___bmul@multiplier 0079               _Lcd_Output 0722  
                  ?_main 0070                    ?_init 0070          __end_of___lwdiv 06C9  
                  _PORTC 0007                    _PORTD 0008                    _TRISC 0087  
                  _TRISD 0088                    _Equal 0038                    _Minus 0036  
                  status 0003                    wtemp0 007E         __end_of_Lcd_Data 0659  
        __initialization 07F3             __end_of_main 07F3             __end_of_init 0722  
            _Lcd_Command 066E                   ??_main 007E                   ??_init 0073  
                 ___bmul 0659                ??___lwdiv 0074              ?_Lcd_Output 007A  
__end_of__initialization 07FC      ___bmul@multiplicand 0077           __pcstackCOMMON 0070  
              ?_Lcd_Data 0070               __pbssBANK0 0020               _delaycount 002E  
             __pmaintext 0789                  ?___bmul 0077               ??_Lcd_Data 0070  
                ___lwdiv 0685             ?_Lcd_Command 0070                  __ptext1 06C9  
                __ptext2 066E                  __ptext3 0722                  __ptext4 0685  
                __ptext5 0659                  __ptext6 0645                  clrloop0 063E  
   end_of_initialization 07FC                Lcd_Data@i 0072             ??_Lcd_Output 007C  
     __end_of_Lcd_Output 0789           __end_of___bmul 066E      start_initialization 07F3  
               ??___bmul 0078                ___latbits 0002         ___lwdiv@dividend 0072  
               ?___lwdiv 0070         ___lwdiv@quotient 0074                clear_ram0 063D  
           Lcd_Command@i 0072                 _Lcd_Data 0645          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0076              Lcd_Output@i 007A              Lcd_Output@j 007D  
            Lcd_Output@s 007C            ??_Lcd_Command 0070  
