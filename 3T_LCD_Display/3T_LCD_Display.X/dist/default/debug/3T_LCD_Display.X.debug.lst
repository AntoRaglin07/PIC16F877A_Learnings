

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Dec 20 19:11:06 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Generated 22/03/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0000                     	;# 
    54     0001                     	;# 
    55     0002                     	;# 
    56     0003                     	;# 
    57     0004                     	;# 
    58     0005                     	;# 
    59     0006                     	;# 
    60     0007                     	;# 
    61     0008                     	;# 
    62     0009                     	;# 
    63     000A                     	;# 
    64     000B                     	;# 
    65     000C                     	;# 
    66     000D                     	;# 
    67     000E                     	;# 
    68     000E                     	;# 
    69     000F                     	;# 
    70     0010                     	;# 
    71     0011                     	;# 
    72     0012                     	;# 
    73     0013                     	;# 
    74     0014                     	;# 
    75     0015                     	;# 
    76     0015                     	;# 
    77     0016                     	;# 
    78     0017                     	;# 
    79     0018                     	;# 
    80     0019                     	;# 
    81     001A                     	;# 
    82     001B                     	;# 
    83     001B                     	;# 
    84     001C                     	;# 
    85     001D                     	;# 
    86     001E                     	;# 
    87     001F                     	;# 
    88     0081                     	;# 
    89     0085                     	;# 
    90     0086                     	;# 
    91     0087                     	;# 
    92     0088                     	;# 
    93     0089                     	;# 
    94     008C                     	;# 
    95     008D                     	;# 
    96     008E                     	;# 
    97     0091                     	;# 
    98     0092                     	;# 
    99     0093                     	;# 
   100     0094                     	;# 
   101     0098                     	;# 
   102     0099                     	;# 
   103     009C                     	;# 
   104     009D                     	;# 
   105     009E                     	;# 
   106     009F                     	;# 
   107     010C                     	;# 
   108     010D                     	;# 
   109     010E                     	;# 
   110     010F                     	;# 
   111     018C                     	;# 
   112     018D                     	;# 
   113     0000                     	;# 
   114     0001                     	;# 
   115     0002                     	;# 
   116     0003                     	;# 
   117     0004                     	;# 
   118     0005                     	;# 
   119     0006                     	;# 
   120     0007                     	;# 
   121     0008                     	;# 
   122     0009                     	;# 
   123     000A                     	;# 
   124     000B                     	;# 
   125     000C                     	;# 
   126     000D                     	;# 
   127     000E                     	;# 
   128     000E                     	;# 
   129     000F                     	;# 
   130     0010                     	;# 
   131     0011                     	;# 
   132     0012                     	;# 
   133     0013                     	;# 
   134     0014                     	;# 
   135     0015                     	;# 
   136     0015                     	;# 
   137     0016                     	;# 
   138     0017                     	;# 
   139     0018                     	;# 
   140     0019                     	;# 
   141     001A                     	;# 
   142     001B                     	;# 
   143     001B                     	;# 
   144     001C                     	;# 
   145     001D                     	;# 
   146     001E                     	;# 
   147     001F                     	;# 
   148     0081                     	;# 
   149     0085                     	;# 
   150     0086                     	;# 
   151     0087                     	;# 
   152     0088                     	;# 
   153     0089                     	;# 
   154     008C                     	;# 
   155     008D                     	;# 
   156     008E                     	;# 
   157     0091                     	;# 
   158     0092                     	;# 
   159     0093                     	;# 
   160     0094                     	;# 
   161     0098                     	;# 
   162     0099                     	;# 
   163     009C                     	;# 
   164     009D                     	;# 
   165     009E                     	;# 
   166     009F                     	;# 
   167     010C                     	;# 
   168     010D                     	;# 
   169     010E                     	;# 
   170     010F                     	;# 
   171     018C                     	;# 
   172     018D                     	;# 
   173                           
   174                           	psect	idataCOMMON
   175     06ED                     __pidataCOMMON:
   176                           
   177                           ;initializer for _name
   178     06ED  3441               	retlw	65
   179     06EE  344E               	retlw	78
   180     06EF  3454               	retlw	84
   181     06F0  344F               	retlw	79
   182                           
   183                           	psect	idataBANK0
   184     06F1                     __pidataBANK0:
   185                           
   186                           ;initializer for _left
   187     06F1  34CD               	retlw	205
   188     06F2  34CC               	retlw	204
   189     06F3  34CB               	retlw	203
   190     06F4  34CA               	retlw	202
   191                           
   192                           ;initializer for _right
   193     06F5  3482               	retlw	130
   194     06F6  3483               	retlw	131
   195     06F7  3484               	retlw	132
   196     06F8  3485               	retlw	133
   197     0008                     _PORTD	set	8
   198     0038                     _RC0	set	56
   199     003B                     _RC3	set	59
   200     0088                     _TRISD	set	136
   201     0087                     _TRISC	set	135
   202                           
   203                           	psect	cinit
   204     07D2                     start_initialization:	
   205                           ; #config settings
   206                           
   207     07D2                     __initialization:
   208                           
   209                           ; Initialize objects allocated to BANK0
   210     07D2  1383               	bcf	3,7	;select IRP bank0
   211     07D3  3028               	movlw	low (__pdataBANK0+8)
   212     07D4  00FD               	movwf	btemp+-1
   213     07D5  3006               	movlw	high __pidataBANK0
   214     07D6  00FE               	movwf	btemp
   215     07D7  30F1               	movlw	low __pidataBANK0
   216     07D8  00FF               	movwf	btemp+1
   217     07D9  3020               	movlw	low __pdataBANK0
   218     07DA  0084               	movwf	4
   219     07DB  120A  118A  271F  120A  118A  	fcall	init_ram0
   220                           
   221                           ; Initialize objects allocated to COMMON
   222     07E0  120A  118A  26ED  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   223     07E5  00F9               	movwf	__pdataCOMMON& (0+127)
   224     07E6  120A  118A  26EE  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   225     07EB  00FA               	movwf	(__pdataCOMMON+1)& (0+127)
   226     07EC  120A  118A  26EF  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   227     07F1  00FB               	movwf	(__pdataCOMMON+2)& (0+127)
   228     07F2  120A  118A  26F0  120A  118A  	fcall	__pidataCOMMON+3	;fetch initializer
   229     07F7  00FC               	movwf	(__pdataCOMMON+3)& (0+127)
   230                           
   231                           ; Clear objects allocated to COMMON
   232     07F8  01F5               	clrf	__pbssCOMMON& (0+127)
   233     07F9  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   234     07FA  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   235     07FB  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
   236     07FC                     end_of_initialization:	
   237                           ;End of C runtime variable initialization code
   238                           
   239     07FC                     __end_of__initialization:
   240     07FC  0183               	clrf	3
   241     07FD  120A  118A  2F2E   	ljmp	_main	;jump to C main() function
   242                           
   243                           	psect	bssCOMMON
   244     0075                     __pbssCOMMON:
   245     0075                     _i:
   246     0075                     	ds	1
   247     0076                     _m:
   248     0076                     	ds	1
   249     0077                     _n:
   250     0077                     	ds	1
   251     0078                     _x:
   252     0078                     	ds	1
   253                           
   254                           	psect	dataCOMMON
   255     0079                     __pdataCOMMON:
   256     0079                     _name:
   257     0079                     	ds	4
   258                           
   259                           	psect	dataBANK0
   260     0020                     __pdataBANK0:
   261     0020                     _left:
   262     0020                     	ds	4
   263     0024                     _right:
   264     0024                     	ds	4
   265                           
   266                           	psect	inittext
   267     071B                     init_fetch0:	
   268                           ;	Called with low address in FSR and high address in W
   269                           
   270     071B  087E               	movf	btemp,w
   271     071C  008A               	movwf	10
   272     071D  087F               	movf	btemp+1,w
   273     071E  0082               	movwf	2
   274     071F                     init_ram0:	
   275                           ;Called with:
   276                           ;	high address of idata address in btemp 
   277                           ;	low address of idata address in btemp+1 
   278                           ;	low address of data in FSR
   279                           ;	high address + 1 of data in btemp-1
   280                           
   281     071F  120A  118A  271B  120A  118A  	fcall	init_fetch0
   282     0724  0080               	movwf	0
   283     0725  0A84               	incf	4,f
   284     0726  0804               	movf	4,w
   285     0727  067D               	xorwf	btemp+-1,w
   286     0728  1903               	btfsc	3,2
   287     0729  3400               	retlw	0
   288     072A  0AFF               	incf	btemp+1,f
   289     072B  1903               	btfsc	3,2
   290     072C  0AFE               	incf	btemp,f
   291     072D  2F1F               	goto	init_ram0
   292                           
   293                           	psect	cstackCOMMON
   294     0070                     __pcstackCOMMON:
   295     0070                     ?_init:
   296     0070                     ?_Lcd_Command:	
   297                           ; 1 bytes @ 0x0
   298                           
   299     0070                     ??_Lcd_Command:	
   300                           ; 1 bytes @ 0x0
   301                           
   302     0070                     ?_Lcd_Data:	
   303                           ; 1 bytes @ 0x0
   304                           
   305     0070                     ??_Lcd_Data:	
   306                           ; 1 bytes @ 0x0
   307                           
   308     0070                     ?_main:	
   309                           ; 1 bytes @ 0x0
   310                           
   311                           
   312                           ; 1 bytes @ 0x0
   313     0070                     	ds	2
   314     0072                     Lcd_Command@i:
   315     0072                     Lcd_Data@i:	
   316                           ; 1 bytes @ 0x2
   317                           
   318                           
   319                           ; 1 bytes @ 0x2
   320     0072                     	ds	1
   321     0073                     ??_init:
   322                           
   323                           ; 1 bytes @ 0x3
   324     0073                     	ds	2
   325     0075                     ??_main:
   326                           
   327                           	psect	maintext
   328     072E                     __pmaintext:	
   329                           ; 1 bytes @ 0x5
   330 ;;
   331 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   332 ;;
   333 ;; *************** function _main *****************
   334 ;; Defined at:
   335 ;;		line 25 in file "newmain.c"
   336 ;; Parameters:    Size  Location     Type
   337 ;;		None
   338 ;; Auto vars:     Size  Location     Type
   339 ;;		None
   340 ;; Return value:  Size  Location     Type
   341 ;;                  1    wreg      void 
   342 ;; Registers used:
   343 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   344 ;; Tracked objects:
   345 ;;		On entry : B00/0
   346 ;;		On exit  : 0/0
   347 ;;		Unchanged: 0/0
   348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   349 ;;      Params:         0       0       0       0       0
   350 ;;      Locals:         0       0       0       0       0
   351 ;;      Temps:          0       0       0       0       0
   352 ;;      Totals:         0       0       0       0       0
   353 ;;Total ram usage:        0 bytes
   354 ;; Hardware stack levels required when called: 2
   355 ;; This function calls:
   356 ;;		_Lcd_Command
   357 ;;		_Lcd_Data
   358 ;;		_init
   359 ;; This function is called by:
   360 ;;		Startup code after reset
   361 ;; This function uses a non-reentrant model
   362 ;;
   363                           
   364     072E                     _main:	
   365                           ;psect for function _main
   366                           
   367     072E                     l711:	
   368                           ;incstack = 0
   369                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   370                           
   371                           
   372                           ;newmain.c: 27:     init();
   373     072E  120A  118A  2773  120A  118A  	fcall	_init
   374     0733                     l713:
   375                           
   376                           ;newmain.c: 30:     for(x=0;x<4;x++){
   377     0733  01F8               	clrf	_x
   378     0734                     l719:
   379                           
   380                           ;newmain.c: 31:         Lcd_Command(right[x]);
   381     0734  0878               	movf	_x,w
   382     0735  3E24               	addlw	(low (_right| 0))& (0+255)
   383     0736  0084               	movwf	4
   384     0737  1383               	bcf	3,7	;select IRP bank0
   385     0738  0800               	movf	0,w
   386     0739  120A  118A  270A  120A  118A  	fcall	_Lcd_Command
   387                           
   388                           ;newmain.c: 32:         Lcd_Data(name[x]);
   389     073E  0878               	movf	_x,w
   390     073F  3E79               	addlw	(low (_name| 0))& (0+255)
   391     0740  0084               	movwf	4
   392     0741  0800               	movf	0,w
   393     0742  120A  118A  26F9  120A  118A  	fcall	_Lcd_Data
   394     0747                     l721:
   395                           
   396                           ;newmain.c: 33:     }
   397     0747  3001               	movlw	1
   398     0748  00FF               	movwf	btemp+1
   399     0749  087F               	movf	btemp+1,w
   400     074A  07F8               	addwf	_x,f
   401     074B                     l723:
   402     074B  3004               	movlw	4
   403     074C  0278               	subwf	_x,w
   404     074D  1C03               	skipc
   405     074E  2F50               	goto	u31
   406     074F  2F51               	goto	u30
   407     0750                     u31:
   408     0750  2F34               	goto	l719
   409     0751                     u30:
   410     0751                     l725:
   411                           
   412                           ;newmain.c: 36:     for(x=0;x<4;x++){
   413     0751  01F8               	clrf	_x
   414     0752                     l731:
   415                           
   416                           ;newmain.c: 37:         Lcd_Command(left[x]);
   417     0752  0878               	movf	_x,w
   418     0753  3E20               	addlw	(low (_left| 0))& (0+255)
   419     0754  0084               	movwf	4
   420     0755  1383               	bcf	3,7	;select IRP bank0
   421     0756  0800               	movf	0,w
   422     0757  120A  118A  270A  120A  118A  	fcall	_Lcd_Command
   423                           
   424                           ;newmain.c: 38:         Lcd_Data(name[x]);
   425     075C  0878               	movf	_x,w
   426     075D  3E79               	addlw	(low (_name| 0))& (0+255)
   427     075E  0084               	movwf	4
   428     075F  0800               	movf	0,w
   429     0760  120A  118A  26F9  120A  118A  	fcall	_Lcd_Data
   430     0765                     l733:
   431                           
   432                           ;newmain.c: 39:     }
   433     0765  3001               	movlw	1
   434     0766  00FF               	movwf	btemp+1
   435     0767  087F               	movf	btemp+1,w
   436     0768  07F8               	addwf	_x,f
   437     0769                     l735:
   438     0769  3004               	movlw	4
   439     076A  0278               	subwf	_x,w
   440     076B  1C03               	skipc
   441     076C  2F6E               	goto	u41
   442     076D  2F6F               	goto	u40
   443     076E                     u41:
   444     076E  2F52               	goto	l731
   445     076F                     u40:
   446     076F                     l41:	
   447                           ;newmain.c: 40:     while(1);
   448                           
   449     076F  2F6F               	goto	l41
   450     0770  120A  118A  2800   	ljmp	start
   451     0773                     __end_of_main:
   452                           
   453                           	psect	text1
   454     0773                     __ptext1:	
   455 ;; *************** function _init *****************
   456 ;; Defined at:
   457 ;;		line 45 in file "newmain.c"
   458 ;; Parameters:    Size  Location     Type
   459 ;;		None
   460 ;; Auto vars:     Size  Location     Type
   461 ;;		None
   462 ;; Return value:  Size  Location     Type
   463 ;;                  1    wreg      void 
   464 ;; Registers used:
   465 ;;		wreg, status,2, status,0, pclath, cstack
   466 ;; Tracked objects:
   467 ;;		On entry : 0/0
   468 ;;		On exit  : 0/0
   469 ;;		Unchanged: 0/0
   470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   471 ;;      Params:         0       0       0       0       0
   472 ;;      Locals:         0       0       0       0       0
   473 ;;      Temps:          2       0       0       0       0
   474 ;;      Totals:         2       0       0       0       0
   475 ;;Total ram usage:        2 bytes
   476 ;; Hardware stack levels used: 1
   477 ;; Hardware stack levels required when called: 1
   478 ;; This function calls:
   479 ;;		_Lcd_Command
   480 ;; This function is called by:
   481 ;;		_main
   482 ;; This function uses a non-reentrant model
   483 ;;
   484                           
   485     0773                     _init:	
   486                           ;psect for function _init
   487                           
   488     0773                     l675:	
   489                           ;incstack = 0
   490                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
   491                           
   492                           
   493                           ;newmain.c: 46:     TRISC = 0x00;
   494     0773  1683               	bsf	3,5	;RP0=1, select bank1
   495     0774  1303               	bcf	3,6	;RP1=0, select bank1
   496     0775  0187               	clrf	7	;volatile
   497                           
   498                           ;newmain.c: 47:     TRISD = 0x00;
   499     0776  0188               	clrf	8	;volatile
   500     0777                     l677:
   501                           
   502                           ;newmain.c: 49:     Lcd_Command(0x30);
   503     0777  3030               	movlw	48
   504     0778  120A  118A  270A  120A  118A  	fcall	_Lcd_Command
   505     077D                     l679:
   506                           
   507                           ;newmain.c: 50:     _delay((unsigned long)((100)*(6000000/4000.0)));
   508     077D  30C3               	movlw	195
   509     077E  00F4               	movwf	??_init+1
   510     077F  30CD               	movlw	205
   511     0780  00F3               	movwf	??_init
   512     0781                     u57:
   513     0781  0BF3               	decfsz	??_init,f
   514     0782  2F81               	goto	u57
   515     0783  0BF4               	decfsz	??_init+1,f
   516     0784  2F81               	goto	u57
   517     0785                     l681:
   518                           
   519                           ;newmain.c: 51:     Lcd_Command(0x30);
   520     0785  3030               	movlw	48
   521     0786  120A  118A  270A  120A  118A  	fcall	_Lcd_Command
   522     078B                     l683:
   523                           
   524                           ;newmain.c: 52:     _delay((unsigned long)((100)*(6000000/4000.0)));
   525     078B  30C3               	movlw	195
   526     078C  00F4               	movwf	??_init+1
   527     078D  30CD               	movlw	205
   528     078E  00F3               	movwf	??_init
   529     078F                     u67:
   530     078F  0BF3               	decfsz	??_init,f
   531     0790  2F8F               	goto	u67
   532     0791  0BF4               	decfsz	??_init+1,f
   533     0792  2F8F               	goto	u67
   534     0793                     l685:
   535                           
   536                           ;newmain.c: 53:     Lcd_Command(0x30);
   537     0793  3030               	movlw	48
   538     0794  120A  118A  270A  120A  118A  	fcall	_Lcd_Command
   539     0799                     l687:
   540                           
   541                           ;newmain.c: 54:     _delay((unsigned long)((100)*(6000000/4000.0)));
   542     0799  30C3               	movlw	195
   543     079A  00F4               	movwf	??_init+1
   544     079B  30CD               	movlw	205
   545     079C  00F3               	movwf	??_init
   546     079D                     u77:
   547     079D  0BF3               	decfsz	??_init,f
   548     079E  2F9D               	goto	u77
   549     079F  0BF4               	decfsz	??_init+1,f
   550     07A0  2F9D               	goto	u77
   551     07A1                     l689:
   552                           
   553                           ;newmain.c: 55:     Lcd_Command(0x38);
   554     07A1  3038               	movlw	56
   555     07A2  120A  118A  270A  120A  118A  	fcall	_Lcd_Command
   556     07A7                     l691:
   557                           
   558                           ;newmain.c: 57:         Lcd_Command(0x06);
   559     07A7  3006               	movlw	6
   560     07A8  120A  118A  270A  120A  118A  	fcall	_Lcd_Command
   561     07AD                     l693:
   562                           
   563                           ;newmain.c: 58:     _delay((unsigned long)((100)*(6000000/4000.0)));
   564     07AD  30C3               	movlw	195
   565     07AE  00F4               	movwf	??_init+1
   566     07AF  30CD               	movlw	205
   567     07B0  00F3               	movwf	??_init
   568     07B1                     u87:
   569     07B1  0BF3               	decfsz	??_init,f
   570     07B2  2FB1               	goto	u87
   571     07B3  0BF4               	decfsz	??_init+1,f
   572     07B4  2FB1               	goto	u87
   573     07B5                     l695:
   574                           
   575                           ;newmain.c: 59:         Lcd_Command(0x0C);
   576     07B5  300C               	movlw	12
   577     07B6  120A  118A  270A  120A  118A  	fcall	_Lcd_Command
   578     07BB                     l697:
   579                           
   580                           ;newmain.c: 60:     _delay((unsigned long)((100)*(6000000/4000.0)));
   581     07BB  30C3               	movlw	195
   582     07BC  00F4               	movwf	??_init+1
   583     07BD  30CD               	movlw	205
   584     07BE  00F3               	movwf	??_init
   585     07BF                     u97:
   586     07BF  0BF3               	decfsz	??_init,f
   587     07C0  2FBF               	goto	u97
   588     07C1  0BF4               	decfsz	??_init+1,f
   589     07C2  2FBF               	goto	u97
   590     07C3                     l699:
   591                           
   592                           ;newmain.c: 61:         Lcd_Command(0x01);
   593     07C3  3001               	movlw	1
   594     07C4  120A  118A  270A  120A  118A  	fcall	_Lcd_Command
   595     07C9                     l701:
   596                           
   597                           ;newmain.c: 62:     _delay((unsigned long)((100)*(6000000/4000.0)));
   598     07C9  30C3               	movlw	195
   599     07CA  00F4               	movwf	??_init+1
   600     07CB  30CD               	movlw	205
   601     07CC  00F3               	movwf	??_init
   602     07CD                     u107:
   603     07CD  0BF3               	decfsz	??_init,f
   604     07CE  2FCD               	goto	u107
   605     07CF  0BF4               	decfsz	??_init+1,f
   606     07D0  2FCD               	goto	u107
   607     07D1                     l47:
   608     07D1  0008               	return
   609     07D2                     __end_of_init:
   610                           
   611                           	psect	text2
   612     070A                     __ptext2:	
   613 ;; *************** function _Lcd_Command *****************
   614 ;; Defined at:
   615 ;;		line 66 in file "newmain.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;  i               1    wreg     unsigned char 
   618 ;; Auto vars:     Size  Location     Type
   619 ;;  i               1    2[COMMON] unsigned char 
   620 ;; Return value:  Size  Location     Type
   621 ;;                  1    wreg      void 
   622 ;; Registers used:
   623 ;;		wreg
   624 ;; Tracked objects:
   625 ;;		On entry : 0/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   629 ;;      Params:         0       0       0       0       0
   630 ;;      Locals:         1       0       0       0       0
   631 ;;      Temps:          2       0       0       0       0
   632 ;;      Totals:         3       0       0       0       0
   633 ;;Total ram usage:        3 bytes
   634 ;; Hardware stack levels used: 1
   635 ;; This function calls:
   636 ;;		Nothing
   637 ;; This function is called by:
   638 ;;		_main
   639 ;;		_init
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643     070A                     _Lcd_Command:	
   644                           ;psect for function _Lcd_Command
   645                           
   646                           
   647                           ;incstack = 0
   648                           ; Regs used in _Lcd_Command: [wreg]
   649                           ;Lcd_Command@i stored from wreg
   650     070A  00F2               	movwf	Lcd_Command@i
   651     070B                     l667:
   652                           
   653                           ;newmain.c: 67:     RC3=0;
   654     070B  1283               	bcf	3,5	;RP0=0, select bank0
   655     070C  1303               	bcf	3,6	;RP1=0, select bank0
   656     070D  1187               	bcf	7,3	;volatile
   657     070E                     l669:
   658                           
   659                           ;newmain.c: 68:     PORTD=i;
   660     070E  0872               	movf	Lcd_Command@i,w
   661     070F  0088               	movwf	8	;volatile
   662     0710                     l671:
   663                           
   664                           ;newmain.c: 69:     RC0=1;
   665     0710  1407               	bsf	7,0	;volatile
   666     0711                     l673:
   667                           
   668                           ;newmain.c: 70:     RC0=0;
   669     0711  1007               	bcf	7,0	;volatile
   670                           
   671                           ;newmain.c: 71:     _delay((unsigned long)((100)*(6000000/4000.0)));
   672     0712  30C3               	movlw	195
   673     0713  00F1               	movwf	??_Lcd_Command+1
   674     0714  30CD               	movlw	205
   675     0715  00F0               	movwf	??_Lcd_Command
   676     0716                     u117:
   677     0716  0BF0               	decfsz	??_Lcd_Command,f
   678     0717  2F16               	goto	u117
   679     0718  0BF1               	decfsz	??_Lcd_Command+1,f
   680     0719  2F16               	goto	u117
   681     071A                     l50:
   682     071A  0008               	return
   683     071B                     __end_of_Lcd_Command:
   684                           
   685                           	psect	text3
   686     06F9                     __ptext3:	
   687 ;; *************** function _Lcd_Data *****************
   688 ;; Defined at:
   689 ;;		line 73 in file "newmain.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;  i               1    wreg     unsigned char 
   692 ;; Auto vars:     Size  Location     Type
   693 ;;  i               1    2[COMMON] unsigned char 
   694 ;; Return value:  Size  Location     Type
   695 ;;                  1    wreg      void 
   696 ;; Registers used:
   697 ;;		wreg
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   703 ;;      Params:         0       0       0       0       0
   704 ;;      Locals:         1       0       0       0       0
   705 ;;      Temps:          2       0       0       0       0
   706 ;;      Totals:         3       0       0       0       0
   707 ;;Total ram usage:        3 bytes
   708 ;; Hardware stack levels used: 1
   709 ;; This function calls:
   710 ;;		Nothing
   711 ;; This function is called by:
   712 ;;		_main
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716     06F9                     _Lcd_Data:	
   717                           ;psect for function _Lcd_Data
   718                           
   719                           
   720                           ;incstack = 0
   721                           ; Regs used in _Lcd_Data: [wreg]
   722                           ;Lcd_Data@i stored from wreg
   723     06F9  00F2               	movwf	Lcd_Data@i
   724     06FA                     l703:
   725                           
   726                           ;newmain.c: 74:     RC3=1;
   727     06FA  1283               	bcf	3,5	;RP0=0, select bank0
   728     06FB  1303               	bcf	3,6	;RP1=0, select bank0
   729     06FC  1587               	bsf	7,3	;volatile
   730     06FD                     l705:
   731                           
   732                           ;newmain.c: 75:     PORTD=i;
   733     06FD  0872               	movf	Lcd_Data@i,w
   734     06FE  0088               	movwf	8	;volatile
   735     06FF                     l707:
   736                           
   737                           ;newmain.c: 76:     RC0=1;
   738     06FF  1407               	bsf	7,0	;volatile
   739     0700                     l709:
   740                           
   741                           ;newmain.c: 77:     RC0=0;
   742     0700  1007               	bcf	7,0	;volatile
   743                           
   744                           ;newmain.c: 78:     _delay((unsigned long)((100)*(6000000/4000.0)));
   745     0701  30C3               	movlw	195
   746     0702  00F1               	movwf	??_Lcd_Data+1
   747     0703  30CD               	movlw	205
   748     0704  00F0               	movwf	??_Lcd_Data
   749     0705                     u127:
   750     0705  0BF0               	decfsz	??_Lcd_Data,f
   751     0706  2F05               	goto	u127
   752     0707  0BF1               	decfsz	??_Lcd_Data+1,f
   753     0708  2F05               	goto	u127
   754     0709                     l53:
   755     0709  0008               	return
   756     070A                     __end_of_Lcd_Data:
   757     007E                     btemp	set	126	;btemp
   758     007E                     wtemp0	set	126
   759                           
   760                           	psect	config
   761                           
   762                           ;Config register CONFIG @ 0x2007
   763                           ;	Oscillator Selection bits
   764                           ;	FOSC = EXTRC, RC oscillator
   765                           ;	Watchdog Timer Enable bit
   766                           ;	WDTE = OFF, WDT disabled
   767                           ;	Power-up Timer Enable bit
   768                           ;	PWRTE = OFF, PWRT disabled
   769                           ;	Brown-out Reset Enable bit
   770                           ;	BOREN = OFF, BOR disabled
   771                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   772                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   773                           ;	Data EEPROM Memory Code Protection bit
   774                           ;	CPD = OFF, Data EEPROM code protection off
   775                           ;	Flash Program Memory Write Enable bits
   776                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   777                           ;	In-Circuit Debugger Mode bit
   778                           ;	DEBUG = 0x1, unprogrammed default
   779                           ;	Flash Program Memory Code Protection bit
   780                           ;	CP = OFF, Code protection off
   781     2007                     	org	8199
   782     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      13
    BANK0            80      0       8
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_init
    _init->_Lcd_Command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      66
                        _Lcd_Command
                           _Lcd_Data
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0      22
                                              3 COMMON     2     2      0
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (2) _Lcd_Command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Command
   _Lcd_Data
   _init
     _Lcd_Command

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       8       5       10.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      15      12        0.0%
ABS                  0      0      15       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Dec 20 19:11:06 2023

                      _i 0075                        _m 0076                        _n 0077  
                      _x 0078                        pc 0002                       l41 076F  
                     l50 071A                       l53 0709                       l47 07D1  
                     u30 0751                       u31 0750                       u40 076F  
                     u41 076E                       u57 0781                       u67 078F  
                     u77 079D                       u87 07B1                       u97 07BF  
                     fsr 0004                      l701 07C9                      l703 06FA  
                    l711 072E                      l705 06FD                      l721 0747  
                    l713 0733                      l707 06FF                      l731 0752  
                    l723 074B                      l709 0700                      l733 0765  
                    l725 0751                      l671 0710                      l735 0769  
                    l719 0734                      l673 0711                      l681 0785  
                    l667 070B                      l691 07A7                      l683 078B  
                    l675 0773                      l669 070E                      l693 07AD  
                    l685 0793                      l677 0777                      l695 07B5  
                    l687 0799                      l679 077D                      l697 07BB  
                    l689 07A1                      l699 07C3                      _RC0 0038  
                    _RC3 003B                      u107 07CD                      u117 0716  
                    u127 0705                      fsr0 0004                      indf 0000  
    __end_of_Lcd_Command 071B                     _main 072E                     _name 0079  
                   _left 0020                     _init 0773                     btemp 007E  
                   start 0000                    ?_main 0070                    ?_init 0070  
                  _PORTD 0008                    _TRISC 0087                    _TRISD 0088  
                  _right 0024                    pclath 000A                    status 0003  
                  wtemp0 007E         __end_of_Lcd_Data 070A          __initialization 07D2  
           __end_of_main 0773             __end_of_init 07D2              _Lcd_Command 070A  
                 ??_main 0075                   ??_init 0073             __pdataCOMMON 0079  
__end_of__initialization 07FC           __pcstackCOMMON 0070             __pidataBANK0 06F1  
              ?_Lcd_Data 0070               __pmaintext 072E               ??_Lcd_Data 0070  
           ?_Lcd_Command 0070                  __ptext1 0773                  __ptext2 070A  
                __ptext3 06F9     end_of_initialization 07FC                Lcd_Data@i 0072  
          __pidataCOMMON 06ED      start_initialization 07D2               init_fetch0 071B  
            __pdataBANK0 0020              __pbssCOMMON 0075                ___latbits 0002  
           Lcd_Command@i 0072                 _Lcd_Data 06F9                 init_ram0 071F  
          ??_Lcd_Command 0070  
